/*
Beeminder

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
Contact: austinrossely@gmail.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// Datapoint struct for Datapoint
type Datapoint struct {
	// A unique ID, used to identify a datapoint when deleting or editing it.
	Id *string `json:"id,omitempty"`
	// The unix time (in seconds) of the datapoint.
	Timestamp *int32 `json:"timestamp,omitempty"`
	// The canonical \"data entry format\" of the datapoint.
	Canonical NullableString `json:"canonical,omitempty"`
	// The date of the datapoint. Sometimes timestamps are surprising due to goal deadlines, so if you're looking at Beeminder data, you're probably interested in the daystamp.
	Daystamp *string `json:"daystamp,omitempty"`
	// The value, e.g., how much you weighed on the day indicated by the timestamp.
	Value *float32 `json:"value,omitempty"`
	// An optional comment about the datapoint.
	Comment NullableString `json:"comment,omitempty"`
	// The unix time that this datapoint was entered or last updated.
	UpdatedAt *int32 `json:"updated_at,omitempty"`
	// If a datapoint was created via the API and this parameter was included, it will be echoed back.
	Requestid NullableString `json:"requestid,omitempty"`
	// Parameter for datapoint representation in goals
	Origin *string `json:"origin,omitempty"`
	Fulltext *string `json:"fulltext,omitempty"`
}

// NewDatapoint instantiates a new Datapoint object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDatapoint() *Datapoint {
	this := Datapoint{}
	return &this
}

// NewDatapointWithDefaults instantiates a new Datapoint object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDatapointWithDefaults() *Datapoint {
	this := Datapoint{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Datapoint) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Datapoint) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Datapoint) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *Datapoint) SetId(v string) {
	o.Id = &v
}

// GetTimestamp returns the Timestamp field value if set, zero value otherwise.
func (o *Datapoint) GetTimestamp() int32 {
	if o == nil || o.Timestamp == nil {
		var ret int32
		return ret
	}
	return *o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Datapoint) GetTimestampOk() (*int32, bool) {
	if o == nil || o.Timestamp == nil {
		return nil, false
	}
	return o.Timestamp, true
}

// HasTimestamp returns a boolean if a field has been set.
func (o *Datapoint) HasTimestamp() bool {
	if o != nil && o.Timestamp != nil {
		return true
	}

	return false
}

// SetTimestamp gets a reference to the given int32 and assigns it to the Timestamp field.
func (o *Datapoint) SetTimestamp(v int32) {
	o.Timestamp = &v
}

// GetCanonical returns the Canonical field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Datapoint) GetCanonical() string {
	if o == nil || o.Canonical.Get() == nil {
		var ret string
		return ret
	}
	return *o.Canonical.Get()
}

// GetCanonicalOk returns a tuple with the Canonical field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Datapoint) GetCanonicalOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Canonical.Get(), o.Canonical.IsSet()
}

// HasCanonical returns a boolean if a field has been set.
func (o *Datapoint) HasCanonical() bool {
	if o != nil && o.Canonical.IsSet() {
		return true
	}

	return false
}

// SetCanonical gets a reference to the given NullableString and assigns it to the Canonical field.
func (o *Datapoint) SetCanonical(v string) {
	o.Canonical.Set(&v)
}
// SetCanonicalNil sets the value for Canonical to be an explicit nil
func (o *Datapoint) SetCanonicalNil() {
	o.Canonical.Set(nil)
}

// UnsetCanonical ensures that no value is present for Canonical, not even an explicit nil
func (o *Datapoint) UnsetCanonical() {
	o.Canonical.Unset()
}

// GetDaystamp returns the Daystamp field value if set, zero value otherwise.
func (o *Datapoint) GetDaystamp() string {
	if o == nil || o.Daystamp == nil {
		var ret string
		return ret
	}
	return *o.Daystamp
}

// GetDaystampOk returns a tuple with the Daystamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Datapoint) GetDaystampOk() (*string, bool) {
	if o == nil || o.Daystamp == nil {
		return nil, false
	}
	return o.Daystamp, true
}

// HasDaystamp returns a boolean if a field has been set.
func (o *Datapoint) HasDaystamp() bool {
	if o != nil && o.Daystamp != nil {
		return true
	}

	return false
}

// SetDaystamp gets a reference to the given string and assigns it to the Daystamp field.
func (o *Datapoint) SetDaystamp(v string) {
	o.Daystamp = &v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *Datapoint) GetValue() float32 {
	if o == nil || o.Value == nil {
		var ret float32
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Datapoint) GetValueOk() (*float32, bool) {
	if o == nil || o.Value == nil {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *Datapoint) HasValue() bool {
	if o != nil && o.Value != nil {
		return true
	}

	return false
}

// SetValue gets a reference to the given float32 and assigns it to the Value field.
func (o *Datapoint) SetValue(v float32) {
	o.Value = &v
}

// GetComment returns the Comment field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Datapoint) GetComment() string {
	if o == nil || o.Comment.Get() == nil {
		var ret string
		return ret
	}
	return *o.Comment.Get()
}

// GetCommentOk returns a tuple with the Comment field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Datapoint) GetCommentOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Comment.Get(), o.Comment.IsSet()
}

// HasComment returns a boolean if a field has been set.
func (o *Datapoint) HasComment() bool {
	if o != nil && o.Comment.IsSet() {
		return true
	}

	return false
}

// SetComment gets a reference to the given NullableString and assigns it to the Comment field.
func (o *Datapoint) SetComment(v string) {
	o.Comment.Set(&v)
}
// SetCommentNil sets the value for Comment to be an explicit nil
func (o *Datapoint) SetCommentNil() {
	o.Comment.Set(nil)
}

// UnsetComment ensures that no value is present for Comment, not even an explicit nil
func (o *Datapoint) UnsetComment() {
	o.Comment.Unset()
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *Datapoint) GetUpdatedAt() int32 {
	if o == nil || o.UpdatedAt == nil {
		var ret int32
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Datapoint) GetUpdatedAtOk() (*int32, bool) {
	if o == nil || o.UpdatedAt == nil {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *Datapoint) HasUpdatedAt() bool {
	if o != nil && o.UpdatedAt != nil {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given int32 and assigns it to the UpdatedAt field.
func (o *Datapoint) SetUpdatedAt(v int32) {
	o.UpdatedAt = &v
}

// GetRequestid returns the Requestid field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Datapoint) GetRequestid() string {
	if o == nil || o.Requestid.Get() == nil {
		var ret string
		return ret
	}
	return *o.Requestid.Get()
}

// GetRequestidOk returns a tuple with the Requestid field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Datapoint) GetRequestidOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Requestid.Get(), o.Requestid.IsSet()
}

// HasRequestid returns a boolean if a field has been set.
func (o *Datapoint) HasRequestid() bool {
	if o != nil && o.Requestid.IsSet() {
		return true
	}

	return false
}

// SetRequestid gets a reference to the given NullableString and assigns it to the Requestid field.
func (o *Datapoint) SetRequestid(v string) {
	o.Requestid.Set(&v)
}
// SetRequestidNil sets the value for Requestid to be an explicit nil
func (o *Datapoint) SetRequestidNil() {
	o.Requestid.Set(nil)
}

// UnsetRequestid ensures that no value is present for Requestid, not even an explicit nil
func (o *Datapoint) UnsetRequestid() {
	o.Requestid.Unset()
}

// GetOrigin returns the Origin field value if set, zero value otherwise.
func (o *Datapoint) GetOrigin() string {
	if o == nil || o.Origin == nil {
		var ret string
		return ret
	}
	return *o.Origin
}

// GetOriginOk returns a tuple with the Origin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Datapoint) GetOriginOk() (*string, bool) {
	if o == nil || o.Origin == nil {
		return nil, false
	}
	return o.Origin, true
}

// HasOrigin returns a boolean if a field has been set.
func (o *Datapoint) HasOrigin() bool {
	if o != nil && o.Origin != nil {
		return true
	}

	return false
}

// SetOrigin gets a reference to the given string and assigns it to the Origin field.
func (o *Datapoint) SetOrigin(v string) {
	o.Origin = &v
}

// GetFulltext returns the Fulltext field value if set, zero value otherwise.
func (o *Datapoint) GetFulltext() string {
	if o == nil || o.Fulltext == nil {
		var ret string
		return ret
	}
	return *o.Fulltext
}

// GetFulltextOk returns a tuple with the Fulltext field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Datapoint) GetFulltextOk() (*string, bool) {
	if o == nil || o.Fulltext == nil {
		return nil, false
	}
	return o.Fulltext, true
}

// HasFulltext returns a boolean if a field has been set.
func (o *Datapoint) HasFulltext() bool {
	if o != nil && o.Fulltext != nil {
		return true
	}

	return false
}

// SetFulltext gets a reference to the given string and assigns it to the Fulltext field.
func (o *Datapoint) SetFulltext(v string) {
	o.Fulltext = &v
}

func (o Datapoint) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Timestamp != nil {
		toSerialize["timestamp"] = o.Timestamp
	}
	if o.Canonical.IsSet() {
		toSerialize["canonical"] = o.Canonical.Get()
	}
	if o.Daystamp != nil {
		toSerialize["daystamp"] = o.Daystamp
	}
	if o.Value != nil {
		toSerialize["value"] = o.Value
	}
	if o.Comment.IsSet() {
		toSerialize["comment"] = o.Comment.Get()
	}
	if o.UpdatedAt != nil {
		toSerialize["updated_at"] = o.UpdatedAt
	}
	if o.Requestid.IsSet() {
		toSerialize["requestid"] = o.Requestid.Get()
	}
	if o.Origin != nil {
		toSerialize["origin"] = o.Origin
	}
	if o.Fulltext != nil {
		toSerialize["fulltext"] = o.Fulltext
	}
	return json.Marshal(toSerialize)
}

type NullableDatapoint struct {
	value *Datapoint
	isSet bool
}

func (v NullableDatapoint) Get() *Datapoint {
	return v.value
}

func (v *NullableDatapoint) Set(val *Datapoint) {
	v.value = val
	v.isSet = true
}

func (v NullableDatapoint) IsSet() bool {
	return v.isSet
}

func (v *NullableDatapoint) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDatapoint(val *Datapoint) *NullableDatapoint {
	return &NullableDatapoint{value: val, isSet: true}
}

func (v NullableDatapoint) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDatapoint) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


