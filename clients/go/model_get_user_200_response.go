/*
Beeminder

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
Contact: austinrossely@gmail.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// GetUser200Response - struct for GetUser200Response
type GetUser200Response struct {
	BigUser *BigUser
	SmallUser *SmallUser
}

// BigUserAsGetUser200Response is a convenience function that returns BigUser wrapped in GetUser200Response
func BigUserAsGetUser200Response(v *BigUser) GetUser200Response {
	return GetUser200Response{
		BigUser: v,
	}
}

// SmallUserAsGetUser200Response is a convenience function that returns SmallUser wrapped in GetUser200Response
func SmallUserAsGetUser200Response(v *SmallUser) GetUser200Response {
	return GetUser200Response{
		SmallUser: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *GetUser200Response) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into BigUser
	err = newStrictDecoder(data).Decode(&dst.BigUser)
	if err == nil {
		jsonBigUser, _ := json.Marshal(dst.BigUser)
		if string(jsonBigUser) == "{}" { // empty struct
			dst.BigUser = nil
		} else {
			match++
		}
	} else {
		dst.BigUser = nil
	}

	// try to unmarshal data into SmallUser
	err = newStrictDecoder(data).Decode(&dst.SmallUser)
	if err == nil {
		jsonSmallUser, _ := json.Marshal(dst.SmallUser)
		if string(jsonSmallUser) == "{}" { // empty struct
			dst.SmallUser = nil
		} else {
			match++
		}
	} else {
		dst.SmallUser = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.BigUser = nil
		dst.SmallUser = nil

		return fmt.Errorf("Data matches more than one schema in oneOf(GetUser200Response)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("Data failed to match schemas in oneOf(GetUser200Response)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src GetUser200Response) MarshalJSON() ([]byte, error) {
	if src.BigUser != nil {
		return json.Marshal(&src.BigUser)
	}

	if src.SmallUser != nil {
		return json.Marshal(&src.SmallUser)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *GetUser200Response) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.BigUser != nil {
		return obj.BigUser
	}

	if obj.SmallUser != nil {
		return obj.SmallUser
	}

	// all schemas are nil
	return nil
}

type NullableGetUser200Response struct {
	value *GetUser200Response
	isSet bool
}

func (v NullableGetUser200Response) Get() *GetUser200Response {
	return v.value
}

func (v *NullableGetUser200Response) Set(val *GetUser200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableGetUser200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableGetUser200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetUser200Response(val *GetUser200Response) *NullableGetUser200Response {
	return &NullableGetUser200Response{value: val, isSet: true}
}

func (v NullableGetUser200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetUser200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


