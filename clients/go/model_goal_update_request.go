/*
Beeminder

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
Contact: austinrossely@gmail.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// GoalUpdateRequest struct for GoalUpdateRequest
type GoalUpdateRequest struct {
	Title *string `json:"title,omitempty"`
	Yaxis *string `json:"yaxis,omitempty"`
	Tmin *string `json:"tmin,omitempty"`
	Tmax *string `json:"tmax,omitempty"`
	Secret *bool `json:"secret,omitempty"`
	Datapublic *bool `json:"datapublic,omitempty"`
	// Like road but with an additional initial row consisting of [initday, initval, null] and an additional final row consisting of [goaldate, goalval, rate]
	Roadall [][]*float32 `json:"roadall,omitempty"`
	// one of {\"api\", \"ifttt\", \"zapier\", or clientname}. Default: none (i.e., \"manual\").
	Datasource *string `json:"datasource,omitempty"`
	Tags []string `json:"tags,omitempty"`
}

// NewGoalUpdateRequest instantiates a new GoalUpdateRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGoalUpdateRequest() *GoalUpdateRequest {
	this := GoalUpdateRequest{}
	var datasource string = "manual"
	this.Datasource = &datasource
	return &this
}

// NewGoalUpdateRequestWithDefaults instantiates a new GoalUpdateRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGoalUpdateRequestWithDefaults() *GoalUpdateRequest {
	this := GoalUpdateRequest{}
	var datasource string = "manual"
	this.Datasource = &datasource
	return &this
}

// GetTitle returns the Title field value if set, zero value otherwise.
func (o *GoalUpdateRequest) GetTitle() string {
	if o == nil || o.Title == nil {
		var ret string
		return ret
	}
	return *o.Title
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GoalUpdateRequest) GetTitleOk() (*string, bool) {
	if o == nil || o.Title == nil {
		return nil, false
	}
	return o.Title, true
}

// HasTitle returns a boolean if a field has been set.
func (o *GoalUpdateRequest) HasTitle() bool {
	if o != nil && o.Title != nil {
		return true
	}

	return false
}

// SetTitle gets a reference to the given string and assigns it to the Title field.
func (o *GoalUpdateRequest) SetTitle(v string) {
	o.Title = &v
}

// GetYaxis returns the Yaxis field value if set, zero value otherwise.
func (o *GoalUpdateRequest) GetYaxis() string {
	if o == nil || o.Yaxis == nil {
		var ret string
		return ret
	}
	return *o.Yaxis
}

// GetYaxisOk returns a tuple with the Yaxis field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GoalUpdateRequest) GetYaxisOk() (*string, bool) {
	if o == nil || o.Yaxis == nil {
		return nil, false
	}
	return o.Yaxis, true
}

// HasYaxis returns a boolean if a field has been set.
func (o *GoalUpdateRequest) HasYaxis() bool {
	if o != nil && o.Yaxis != nil {
		return true
	}

	return false
}

// SetYaxis gets a reference to the given string and assigns it to the Yaxis field.
func (o *GoalUpdateRequest) SetYaxis(v string) {
	o.Yaxis = &v
}

// GetTmin returns the Tmin field value if set, zero value otherwise.
func (o *GoalUpdateRequest) GetTmin() string {
	if o == nil || o.Tmin == nil {
		var ret string
		return ret
	}
	return *o.Tmin
}

// GetTminOk returns a tuple with the Tmin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GoalUpdateRequest) GetTminOk() (*string, bool) {
	if o == nil || o.Tmin == nil {
		return nil, false
	}
	return o.Tmin, true
}

// HasTmin returns a boolean if a field has been set.
func (o *GoalUpdateRequest) HasTmin() bool {
	if o != nil && o.Tmin != nil {
		return true
	}

	return false
}

// SetTmin gets a reference to the given string and assigns it to the Tmin field.
func (o *GoalUpdateRequest) SetTmin(v string) {
	o.Tmin = &v
}

// GetTmax returns the Tmax field value if set, zero value otherwise.
func (o *GoalUpdateRequest) GetTmax() string {
	if o == nil || o.Tmax == nil {
		var ret string
		return ret
	}
	return *o.Tmax
}

// GetTmaxOk returns a tuple with the Tmax field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GoalUpdateRequest) GetTmaxOk() (*string, bool) {
	if o == nil || o.Tmax == nil {
		return nil, false
	}
	return o.Tmax, true
}

// HasTmax returns a boolean if a field has been set.
func (o *GoalUpdateRequest) HasTmax() bool {
	if o != nil && o.Tmax != nil {
		return true
	}

	return false
}

// SetTmax gets a reference to the given string and assigns it to the Tmax field.
func (o *GoalUpdateRequest) SetTmax(v string) {
	o.Tmax = &v
}

// GetSecret returns the Secret field value if set, zero value otherwise.
func (o *GoalUpdateRequest) GetSecret() bool {
	if o == nil || o.Secret == nil {
		var ret bool
		return ret
	}
	return *o.Secret
}

// GetSecretOk returns a tuple with the Secret field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GoalUpdateRequest) GetSecretOk() (*bool, bool) {
	if o == nil || o.Secret == nil {
		return nil, false
	}
	return o.Secret, true
}

// HasSecret returns a boolean if a field has been set.
func (o *GoalUpdateRequest) HasSecret() bool {
	if o != nil && o.Secret != nil {
		return true
	}

	return false
}

// SetSecret gets a reference to the given bool and assigns it to the Secret field.
func (o *GoalUpdateRequest) SetSecret(v bool) {
	o.Secret = &v
}

// GetDatapublic returns the Datapublic field value if set, zero value otherwise.
func (o *GoalUpdateRequest) GetDatapublic() bool {
	if o == nil || o.Datapublic == nil {
		var ret bool
		return ret
	}
	return *o.Datapublic
}

// GetDatapublicOk returns a tuple with the Datapublic field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GoalUpdateRequest) GetDatapublicOk() (*bool, bool) {
	if o == nil || o.Datapublic == nil {
		return nil, false
	}
	return o.Datapublic, true
}

// HasDatapublic returns a boolean if a field has been set.
func (o *GoalUpdateRequest) HasDatapublic() bool {
	if o != nil && o.Datapublic != nil {
		return true
	}

	return false
}

// SetDatapublic gets a reference to the given bool and assigns it to the Datapublic field.
func (o *GoalUpdateRequest) SetDatapublic(v bool) {
	o.Datapublic = &v
}

// GetRoadall returns the Roadall field value if set, zero value otherwise.
func (o *GoalUpdateRequest) GetRoadall() [][]*float32 {
	if o == nil || o.Roadall == nil {
		var ret [][]*float32
		return ret
	}
	return o.Roadall
}

// GetRoadallOk returns a tuple with the Roadall field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GoalUpdateRequest) GetRoadallOk() ([][]*float32, bool) {
	if o == nil || o.Roadall == nil {
		return nil, false
	}
	return o.Roadall, true
}

// HasRoadall returns a boolean if a field has been set.
func (o *GoalUpdateRequest) HasRoadall() bool {
	if o != nil && o.Roadall != nil {
		return true
	}

	return false
}

// SetRoadall gets a reference to the given [][]*float32 and assigns it to the Roadall field.
func (o *GoalUpdateRequest) SetRoadall(v [][]*float32) {
	o.Roadall = v
}

// GetDatasource returns the Datasource field value if set, zero value otherwise.
func (o *GoalUpdateRequest) GetDatasource() string {
	if o == nil || o.Datasource == nil {
		var ret string
		return ret
	}
	return *o.Datasource
}

// GetDatasourceOk returns a tuple with the Datasource field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GoalUpdateRequest) GetDatasourceOk() (*string, bool) {
	if o == nil || o.Datasource == nil {
		return nil, false
	}
	return o.Datasource, true
}

// HasDatasource returns a boolean if a field has been set.
func (o *GoalUpdateRequest) HasDatasource() bool {
	if o != nil && o.Datasource != nil {
		return true
	}

	return false
}

// SetDatasource gets a reference to the given string and assigns it to the Datasource field.
func (o *GoalUpdateRequest) SetDatasource(v string) {
	o.Datasource = &v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *GoalUpdateRequest) GetTags() []string {
	if o == nil || o.Tags == nil {
		var ret []string
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GoalUpdateRequest) GetTagsOk() ([]string, bool) {
	if o == nil || o.Tags == nil {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *GoalUpdateRequest) HasTags() bool {
	if o != nil && o.Tags != nil {
		return true
	}

	return false
}

// SetTags gets a reference to the given []string and assigns it to the Tags field.
func (o *GoalUpdateRequest) SetTags(v []string) {
	o.Tags = v
}

func (o GoalUpdateRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Title != nil {
		toSerialize["title"] = o.Title
	}
	if o.Yaxis != nil {
		toSerialize["yaxis"] = o.Yaxis
	}
	if o.Tmin != nil {
		toSerialize["tmin"] = o.Tmin
	}
	if o.Tmax != nil {
		toSerialize["tmax"] = o.Tmax
	}
	if o.Secret != nil {
		toSerialize["secret"] = o.Secret
	}
	if o.Datapublic != nil {
		toSerialize["datapublic"] = o.Datapublic
	}
	if o.Roadall != nil {
		toSerialize["roadall"] = o.Roadall
	}
	if o.Datasource != nil {
		toSerialize["datasource"] = o.Datasource
	}
	if o.Tags != nil {
		toSerialize["tags"] = o.Tags
	}
	return json.Marshal(toSerialize)
}

type NullableGoalUpdateRequest struct {
	value *GoalUpdateRequest
	isSet bool
}

func (v NullableGoalUpdateRequest) Get() *GoalUpdateRequest {
	return v.value
}

func (v *NullableGoalUpdateRequest) Set(val *GoalUpdateRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableGoalUpdateRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableGoalUpdateRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGoalUpdateRequest(val *GoalUpdateRequest) *NullableGoalUpdateRequest {
	return &NullableGoalUpdateRequest{value: val, isSet: true}
}

func (v NullableGoalUpdateRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGoalUpdateRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


