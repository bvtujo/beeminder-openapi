/*
Beeminder

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
Contact: austinrossely@gmail.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// CreateDatapointRequest struct for CreateDatapointRequest
type CreateDatapointRequest struct {
	Value *float32 `json:"value,omitempty"`
	// The unix time (in seconds) of the datapoint.
	Timestamp NullableInt32 `json:"timestamp,omitempty"`
	// The date of the datapoint. Sometimes timestamps are surprising due to goal deadlines, so if you're looking at Beeminder data, you're probably interested in the daystamp.
	Daystamp NullableString `json:"daystamp,omitempty"`
	// An optional comment about the datapoint.
	Comment NullableString `json:"comment,omitempty"`
	// string to uniquely identify this datapoint (scoped to this goal. The same requestid can be used for different goals without being considered a duplicate). Clients can use this to verify that Beeminder received a datapoint (important for clients with spotty connectivity). Using requestids also means clients can safely resend datapoints without accidentally creating duplicates. If requestid is included and the datapoint is identical to the existing datapoint with that requestid then the datapoint will be ignored (the API will return \"duplicate datapoint\"). If requestid is included and the datapoint differs from the existing one with the same requestid then the datapoint will be updated. If no datapoint with the requestid exists then the datapoint is simply created. In other words, this is an upsert endpoint and requestid is an idempotency key.
	RequestId NullableString `json:"requestId,omitempty"`
}

// NewCreateDatapointRequest instantiates a new CreateDatapointRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateDatapointRequest() *CreateDatapointRequest {
	this := CreateDatapointRequest{}
	return &this
}

// NewCreateDatapointRequestWithDefaults instantiates a new CreateDatapointRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateDatapointRequestWithDefaults() *CreateDatapointRequest {
	this := CreateDatapointRequest{}
	return &this
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *CreateDatapointRequest) GetValue() float32 {
	if o == nil || o.Value == nil {
		var ret float32
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateDatapointRequest) GetValueOk() (*float32, bool) {
	if o == nil || o.Value == nil {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *CreateDatapointRequest) HasValue() bool {
	if o != nil && o.Value != nil {
		return true
	}

	return false
}

// SetValue gets a reference to the given float32 and assigns it to the Value field.
func (o *CreateDatapointRequest) SetValue(v float32) {
	o.Value = &v
}

// GetTimestamp returns the Timestamp field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateDatapointRequest) GetTimestamp() int32 {
	if o == nil || o.Timestamp.Get() == nil {
		var ret int32
		return ret
	}
	return *o.Timestamp.Get()
}

// GetTimestampOk returns a tuple with the Timestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateDatapointRequest) GetTimestampOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Timestamp.Get(), o.Timestamp.IsSet()
}

// HasTimestamp returns a boolean if a field has been set.
func (o *CreateDatapointRequest) HasTimestamp() bool {
	if o != nil && o.Timestamp.IsSet() {
		return true
	}

	return false
}

// SetTimestamp gets a reference to the given NullableInt32 and assigns it to the Timestamp field.
func (o *CreateDatapointRequest) SetTimestamp(v int32) {
	o.Timestamp.Set(&v)
}
// SetTimestampNil sets the value for Timestamp to be an explicit nil
func (o *CreateDatapointRequest) SetTimestampNil() {
	o.Timestamp.Set(nil)
}

// UnsetTimestamp ensures that no value is present for Timestamp, not even an explicit nil
func (o *CreateDatapointRequest) UnsetTimestamp() {
	o.Timestamp.Unset()
}

// GetDaystamp returns the Daystamp field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateDatapointRequest) GetDaystamp() string {
	if o == nil || o.Daystamp.Get() == nil {
		var ret string
		return ret
	}
	return *o.Daystamp.Get()
}

// GetDaystampOk returns a tuple with the Daystamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateDatapointRequest) GetDaystampOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Daystamp.Get(), o.Daystamp.IsSet()
}

// HasDaystamp returns a boolean if a field has been set.
func (o *CreateDatapointRequest) HasDaystamp() bool {
	if o != nil && o.Daystamp.IsSet() {
		return true
	}

	return false
}

// SetDaystamp gets a reference to the given NullableString and assigns it to the Daystamp field.
func (o *CreateDatapointRequest) SetDaystamp(v string) {
	o.Daystamp.Set(&v)
}
// SetDaystampNil sets the value for Daystamp to be an explicit nil
func (o *CreateDatapointRequest) SetDaystampNil() {
	o.Daystamp.Set(nil)
}

// UnsetDaystamp ensures that no value is present for Daystamp, not even an explicit nil
func (o *CreateDatapointRequest) UnsetDaystamp() {
	o.Daystamp.Unset()
}

// GetComment returns the Comment field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateDatapointRequest) GetComment() string {
	if o == nil || o.Comment.Get() == nil {
		var ret string
		return ret
	}
	return *o.Comment.Get()
}

// GetCommentOk returns a tuple with the Comment field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateDatapointRequest) GetCommentOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Comment.Get(), o.Comment.IsSet()
}

// HasComment returns a boolean if a field has been set.
func (o *CreateDatapointRequest) HasComment() bool {
	if o != nil && o.Comment.IsSet() {
		return true
	}

	return false
}

// SetComment gets a reference to the given NullableString and assigns it to the Comment field.
func (o *CreateDatapointRequest) SetComment(v string) {
	o.Comment.Set(&v)
}
// SetCommentNil sets the value for Comment to be an explicit nil
func (o *CreateDatapointRequest) SetCommentNil() {
	o.Comment.Set(nil)
}

// UnsetComment ensures that no value is present for Comment, not even an explicit nil
func (o *CreateDatapointRequest) UnsetComment() {
	o.Comment.Unset()
}

// GetRequestId returns the RequestId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateDatapointRequest) GetRequestId() string {
	if o == nil || o.RequestId.Get() == nil {
		var ret string
		return ret
	}
	return *o.RequestId.Get()
}

// GetRequestIdOk returns a tuple with the RequestId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateDatapointRequest) GetRequestIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.RequestId.Get(), o.RequestId.IsSet()
}

// HasRequestId returns a boolean if a field has been set.
func (o *CreateDatapointRequest) HasRequestId() bool {
	if o != nil && o.RequestId.IsSet() {
		return true
	}

	return false
}

// SetRequestId gets a reference to the given NullableString and assigns it to the RequestId field.
func (o *CreateDatapointRequest) SetRequestId(v string) {
	o.RequestId.Set(&v)
}
// SetRequestIdNil sets the value for RequestId to be an explicit nil
func (o *CreateDatapointRequest) SetRequestIdNil() {
	o.RequestId.Set(nil)
}

// UnsetRequestId ensures that no value is present for RequestId, not even an explicit nil
func (o *CreateDatapointRequest) UnsetRequestId() {
	o.RequestId.Unset()
}

func (o CreateDatapointRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Value != nil {
		toSerialize["value"] = o.Value
	}
	if o.Timestamp.IsSet() {
		toSerialize["timestamp"] = o.Timestamp.Get()
	}
	if o.Daystamp.IsSet() {
		toSerialize["daystamp"] = o.Daystamp.Get()
	}
	if o.Comment.IsSet() {
		toSerialize["comment"] = o.Comment.Get()
	}
	if o.RequestId.IsSet() {
		toSerialize["requestId"] = o.RequestId.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableCreateDatapointRequest struct {
	value *CreateDatapointRequest
	isSet bool
}

func (v NullableCreateDatapointRequest) Get() *CreateDatapointRequest {
	return v.value
}

func (v *NullableCreateDatapointRequest) Set(val *CreateDatapointRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateDatapointRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateDatapointRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateDatapointRequest(val *CreateDatapointRequest) *NullableCreateDatapointRequest {
	return &NullableCreateDatapointRequest{value: val, isSet: true}
}

func (v NullableCreateDatapointRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateDatapointRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


