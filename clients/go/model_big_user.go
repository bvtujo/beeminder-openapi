/*
Beeminder

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
Contact: austinrossely@gmail.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// BigUser struct for BigUser
type BigUser struct {
	Username *string `json:"username,omitempty"`
	Timezone *string `json:"timezone,omitempty"`
	UpdatedAt *int32 `json:"updated_at,omitempty"`
	CreatedAt *int32 `json:"created_at,omitempty"`
	UrgencyLoad *int32 `json:"urgency_load,omitempty"`
	Deadbeat *bool `json:"deadbeat,omitempty"`
	DeletedGoals []BigUserDeletedGoalsInner `json:"deleted_goals,omitempty"`
	Goals []Goal `json:"goals,omitempty"`
}

// NewBigUser instantiates a new BigUser object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBigUser() *BigUser {
	this := BigUser{}
	return &this
}

// NewBigUserWithDefaults instantiates a new BigUser object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBigUserWithDefaults() *BigUser {
	this := BigUser{}
	return &this
}

// GetUsername returns the Username field value if set, zero value otherwise.
func (o *BigUser) GetUsername() string {
	if o == nil || o.Username == nil {
		var ret string
		return ret
	}
	return *o.Username
}

// GetUsernameOk returns a tuple with the Username field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BigUser) GetUsernameOk() (*string, bool) {
	if o == nil || o.Username == nil {
		return nil, false
	}
	return o.Username, true
}

// HasUsername returns a boolean if a field has been set.
func (o *BigUser) HasUsername() bool {
	if o != nil && o.Username != nil {
		return true
	}

	return false
}

// SetUsername gets a reference to the given string and assigns it to the Username field.
func (o *BigUser) SetUsername(v string) {
	o.Username = &v
}

// GetTimezone returns the Timezone field value if set, zero value otherwise.
func (o *BigUser) GetTimezone() string {
	if o == nil || o.Timezone == nil {
		var ret string
		return ret
	}
	return *o.Timezone
}

// GetTimezoneOk returns a tuple with the Timezone field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BigUser) GetTimezoneOk() (*string, bool) {
	if o == nil || o.Timezone == nil {
		return nil, false
	}
	return o.Timezone, true
}

// HasTimezone returns a boolean if a field has been set.
func (o *BigUser) HasTimezone() bool {
	if o != nil && o.Timezone != nil {
		return true
	}

	return false
}

// SetTimezone gets a reference to the given string and assigns it to the Timezone field.
func (o *BigUser) SetTimezone(v string) {
	o.Timezone = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *BigUser) GetUpdatedAt() int32 {
	if o == nil || o.UpdatedAt == nil {
		var ret int32
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BigUser) GetUpdatedAtOk() (*int32, bool) {
	if o == nil || o.UpdatedAt == nil {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *BigUser) HasUpdatedAt() bool {
	if o != nil && o.UpdatedAt != nil {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given int32 and assigns it to the UpdatedAt field.
func (o *BigUser) SetUpdatedAt(v int32) {
	o.UpdatedAt = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *BigUser) GetCreatedAt() int32 {
	if o == nil || o.CreatedAt == nil {
		var ret int32
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BigUser) GetCreatedAtOk() (*int32, bool) {
	if o == nil || o.CreatedAt == nil {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *BigUser) HasCreatedAt() bool {
	if o != nil && o.CreatedAt != nil {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given int32 and assigns it to the CreatedAt field.
func (o *BigUser) SetCreatedAt(v int32) {
	o.CreatedAt = &v
}

// GetUrgencyLoad returns the UrgencyLoad field value if set, zero value otherwise.
func (o *BigUser) GetUrgencyLoad() int32 {
	if o == nil || o.UrgencyLoad == nil {
		var ret int32
		return ret
	}
	return *o.UrgencyLoad
}

// GetUrgencyLoadOk returns a tuple with the UrgencyLoad field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BigUser) GetUrgencyLoadOk() (*int32, bool) {
	if o == nil || o.UrgencyLoad == nil {
		return nil, false
	}
	return o.UrgencyLoad, true
}

// HasUrgencyLoad returns a boolean if a field has been set.
func (o *BigUser) HasUrgencyLoad() bool {
	if o != nil && o.UrgencyLoad != nil {
		return true
	}

	return false
}

// SetUrgencyLoad gets a reference to the given int32 and assigns it to the UrgencyLoad field.
func (o *BigUser) SetUrgencyLoad(v int32) {
	o.UrgencyLoad = &v
}

// GetDeadbeat returns the Deadbeat field value if set, zero value otherwise.
func (o *BigUser) GetDeadbeat() bool {
	if o == nil || o.Deadbeat == nil {
		var ret bool
		return ret
	}
	return *o.Deadbeat
}

// GetDeadbeatOk returns a tuple with the Deadbeat field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BigUser) GetDeadbeatOk() (*bool, bool) {
	if o == nil || o.Deadbeat == nil {
		return nil, false
	}
	return o.Deadbeat, true
}

// HasDeadbeat returns a boolean if a field has been set.
func (o *BigUser) HasDeadbeat() bool {
	if o != nil && o.Deadbeat != nil {
		return true
	}

	return false
}

// SetDeadbeat gets a reference to the given bool and assigns it to the Deadbeat field.
func (o *BigUser) SetDeadbeat(v bool) {
	o.Deadbeat = &v
}

// GetDeletedGoals returns the DeletedGoals field value if set, zero value otherwise.
func (o *BigUser) GetDeletedGoals() []BigUserDeletedGoalsInner {
	if o == nil || o.DeletedGoals == nil {
		var ret []BigUserDeletedGoalsInner
		return ret
	}
	return o.DeletedGoals
}

// GetDeletedGoalsOk returns a tuple with the DeletedGoals field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BigUser) GetDeletedGoalsOk() ([]BigUserDeletedGoalsInner, bool) {
	if o == nil || o.DeletedGoals == nil {
		return nil, false
	}
	return o.DeletedGoals, true
}

// HasDeletedGoals returns a boolean if a field has been set.
func (o *BigUser) HasDeletedGoals() bool {
	if o != nil && o.DeletedGoals != nil {
		return true
	}

	return false
}

// SetDeletedGoals gets a reference to the given []BigUserDeletedGoalsInner and assigns it to the DeletedGoals field.
func (o *BigUser) SetDeletedGoals(v []BigUserDeletedGoalsInner) {
	o.DeletedGoals = v
}

// GetGoals returns the Goals field value if set, zero value otherwise.
func (o *BigUser) GetGoals() []Goal {
	if o == nil || o.Goals == nil {
		var ret []Goal
		return ret
	}
	return o.Goals
}

// GetGoalsOk returns a tuple with the Goals field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BigUser) GetGoalsOk() ([]Goal, bool) {
	if o == nil || o.Goals == nil {
		return nil, false
	}
	return o.Goals, true
}

// HasGoals returns a boolean if a field has been set.
func (o *BigUser) HasGoals() bool {
	if o != nil && o.Goals != nil {
		return true
	}

	return false
}

// SetGoals gets a reference to the given []Goal and assigns it to the Goals field.
func (o *BigUser) SetGoals(v []Goal) {
	o.Goals = v
}

func (o BigUser) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Username != nil {
		toSerialize["username"] = o.Username
	}
	if o.Timezone != nil {
		toSerialize["timezone"] = o.Timezone
	}
	if o.UpdatedAt != nil {
		toSerialize["updated_at"] = o.UpdatedAt
	}
	if o.CreatedAt != nil {
		toSerialize["created_at"] = o.CreatedAt
	}
	if o.UrgencyLoad != nil {
		toSerialize["urgency_load"] = o.UrgencyLoad
	}
	if o.Deadbeat != nil {
		toSerialize["deadbeat"] = o.Deadbeat
	}
	if o.DeletedGoals != nil {
		toSerialize["deleted_goals"] = o.DeletedGoals
	}
	if o.Goals != nil {
		toSerialize["goals"] = o.Goals
	}
	return json.Marshal(toSerialize)
}

type NullableBigUser struct {
	value *BigUser
	isSet bool
}

func (v NullableBigUser) Get() *BigUser {
	return v.value
}

func (v *NullableBigUser) Set(val *BigUser) {
	v.value = val
	v.isSet = true
}

func (v NullableBigUser) IsSet() bool {
	return v.isSet
}

func (v *NullableBigUser) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBigUser(val *BigUser) *NullableBigUser {
	return &NullableBigUser{value: val, isSet: true}
}

func (v NullableBigUser) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBigUser) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


