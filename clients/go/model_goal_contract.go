/*
Beeminder

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
Contact: austinrossely@gmail.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// GoalContract struct for GoalContract
type GoalContract struct {
	Amount *float32 `json:"amount,omitempty"`
	StepdownAmount NullableFloat32 `json:"stepdown_amount,omitempty"`
	PendingAmount NullableFloat32 `json:"pending_amount,omitempty"`
	PendingAt NullableFloat32 `json:"pending_at,omitempty"`
}

// NewGoalContract instantiates a new GoalContract object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGoalContract() *GoalContract {
	this := GoalContract{}
	return &this
}

// NewGoalContractWithDefaults instantiates a new GoalContract object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGoalContractWithDefaults() *GoalContract {
	this := GoalContract{}
	return &this
}

// GetAmount returns the Amount field value if set, zero value otherwise.
func (o *GoalContract) GetAmount() float32 {
	if o == nil || o.Amount == nil {
		var ret float32
		return ret
	}
	return *o.Amount
}

// GetAmountOk returns a tuple with the Amount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GoalContract) GetAmountOk() (*float32, bool) {
	if o == nil || o.Amount == nil {
		return nil, false
	}
	return o.Amount, true
}

// HasAmount returns a boolean if a field has been set.
func (o *GoalContract) HasAmount() bool {
	if o != nil && o.Amount != nil {
		return true
	}

	return false
}

// SetAmount gets a reference to the given float32 and assigns it to the Amount field.
func (o *GoalContract) SetAmount(v float32) {
	o.Amount = &v
}

// GetStepdownAmount returns the StepdownAmount field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GoalContract) GetStepdownAmount() float32 {
	if o == nil || o.StepdownAmount.Get() == nil {
		var ret float32
		return ret
	}
	return *o.StepdownAmount.Get()
}

// GetStepdownAmountOk returns a tuple with the StepdownAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GoalContract) GetStepdownAmountOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.StepdownAmount.Get(), o.StepdownAmount.IsSet()
}

// HasStepdownAmount returns a boolean if a field has been set.
func (o *GoalContract) HasStepdownAmount() bool {
	if o != nil && o.StepdownAmount.IsSet() {
		return true
	}

	return false
}

// SetStepdownAmount gets a reference to the given NullableFloat32 and assigns it to the StepdownAmount field.
func (o *GoalContract) SetStepdownAmount(v float32) {
	o.StepdownAmount.Set(&v)
}
// SetStepdownAmountNil sets the value for StepdownAmount to be an explicit nil
func (o *GoalContract) SetStepdownAmountNil() {
	o.StepdownAmount.Set(nil)
}

// UnsetStepdownAmount ensures that no value is present for StepdownAmount, not even an explicit nil
func (o *GoalContract) UnsetStepdownAmount() {
	o.StepdownAmount.Unset()
}

// GetPendingAmount returns the PendingAmount field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GoalContract) GetPendingAmount() float32 {
	if o == nil || o.PendingAmount.Get() == nil {
		var ret float32
		return ret
	}
	return *o.PendingAmount.Get()
}

// GetPendingAmountOk returns a tuple with the PendingAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GoalContract) GetPendingAmountOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.PendingAmount.Get(), o.PendingAmount.IsSet()
}

// HasPendingAmount returns a boolean if a field has been set.
func (o *GoalContract) HasPendingAmount() bool {
	if o != nil && o.PendingAmount.IsSet() {
		return true
	}

	return false
}

// SetPendingAmount gets a reference to the given NullableFloat32 and assigns it to the PendingAmount field.
func (o *GoalContract) SetPendingAmount(v float32) {
	o.PendingAmount.Set(&v)
}
// SetPendingAmountNil sets the value for PendingAmount to be an explicit nil
func (o *GoalContract) SetPendingAmountNil() {
	o.PendingAmount.Set(nil)
}

// UnsetPendingAmount ensures that no value is present for PendingAmount, not even an explicit nil
func (o *GoalContract) UnsetPendingAmount() {
	o.PendingAmount.Unset()
}

// GetPendingAt returns the PendingAt field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GoalContract) GetPendingAt() float32 {
	if o == nil || o.PendingAt.Get() == nil {
		var ret float32
		return ret
	}
	return *o.PendingAt.Get()
}

// GetPendingAtOk returns a tuple with the PendingAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GoalContract) GetPendingAtOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.PendingAt.Get(), o.PendingAt.IsSet()
}

// HasPendingAt returns a boolean if a field has been set.
func (o *GoalContract) HasPendingAt() bool {
	if o != nil && o.PendingAt.IsSet() {
		return true
	}

	return false
}

// SetPendingAt gets a reference to the given NullableFloat32 and assigns it to the PendingAt field.
func (o *GoalContract) SetPendingAt(v float32) {
	o.PendingAt.Set(&v)
}
// SetPendingAtNil sets the value for PendingAt to be an explicit nil
func (o *GoalContract) SetPendingAtNil() {
	o.PendingAt.Set(nil)
}

// UnsetPendingAt ensures that no value is present for PendingAt, not even an explicit nil
func (o *GoalContract) UnsetPendingAt() {
	o.PendingAt.Unset()
}

func (o GoalContract) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Amount != nil {
		toSerialize["amount"] = o.Amount
	}
	if o.StepdownAmount.IsSet() {
		toSerialize["stepdown_amount"] = o.StepdownAmount.Get()
	}
	if o.PendingAmount.IsSet() {
		toSerialize["pending_amount"] = o.PendingAmount.Get()
	}
	if o.PendingAt.IsSet() {
		toSerialize["pending_at"] = o.PendingAt.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableGoalContract struct {
	value *GoalContract
	isSet bool
}

func (v NullableGoalContract) Get() *GoalContract {
	return v.value
}

func (v *NullableGoalContract) Set(val *GoalContract) {
	v.value = val
	v.isSet = true
}

func (v NullableGoalContract) IsSet() bool {
	return v.isSet
}

func (v *NullableGoalContract) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGoalContract(val *GoalContract) *NullableGoalContract {
	return &NullableGoalContract{value: val, isSet: true}
}

func (v NullableGoalContract) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGoalContract) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


