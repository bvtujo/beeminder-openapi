/*
Beeminder

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
Contact: austinrossely@gmail.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// UpdateDatapointRequest struct for UpdateDatapointRequest
type UpdateDatapointRequest struct {
	Value NullableFloat32 `json:"value,omitempty"`
	// The unix time (in seconds) of the datapoint.
	Timestamp NullableInt32 `json:"timestamp,omitempty"`
	// An optional comment about the datapoint.
	Comment NullableString `json:"comment,omitempty"`
}

// NewUpdateDatapointRequest instantiates a new UpdateDatapointRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateDatapointRequest() *UpdateDatapointRequest {
	this := UpdateDatapointRequest{}
	return &this
}

// NewUpdateDatapointRequestWithDefaults instantiates a new UpdateDatapointRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateDatapointRequestWithDefaults() *UpdateDatapointRequest {
	this := UpdateDatapointRequest{}
	return &this
}

// GetValue returns the Value field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateDatapointRequest) GetValue() float32 {
	if o == nil || o.Value.Get() == nil {
		var ret float32
		return ret
	}
	return *o.Value.Get()
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateDatapointRequest) GetValueOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Value.Get(), o.Value.IsSet()
}

// HasValue returns a boolean if a field has been set.
func (o *UpdateDatapointRequest) HasValue() bool {
	if o != nil && o.Value.IsSet() {
		return true
	}

	return false
}

// SetValue gets a reference to the given NullableFloat32 and assigns it to the Value field.
func (o *UpdateDatapointRequest) SetValue(v float32) {
	o.Value.Set(&v)
}
// SetValueNil sets the value for Value to be an explicit nil
func (o *UpdateDatapointRequest) SetValueNil() {
	o.Value.Set(nil)
}

// UnsetValue ensures that no value is present for Value, not even an explicit nil
func (o *UpdateDatapointRequest) UnsetValue() {
	o.Value.Unset()
}

// GetTimestamp returns the Timestamp field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateDatapointRequest) GetTimestamp() int32 {
	if o == nil || o.Timestamp.Get() == nil {
		var ret int32
		return ret
	}
	return *o.Timestamp.Get()
}

// GetTimestampOk returns a tuple with the Timestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateDatapointRequest) GetTimestampOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Timestamp.Get(), o.Timestamp.IsSet()
}

// HasTimestamp returns a boolean if a field has been set.
func (o *UpdateDatapointRequest) HasTimestamp() bool {
	if o != nil && o.Timestamp.IsSet() {
		return true
	}

	return false
}

// SetTimestamp gets a reference to the given NullableInt32 and assigns it to the Timestamp field.
func (o *UpdateDatapointRequest) SetTimestamp(v int32) {
	o.Timestamp.Set(&v)
}
// SetTimestampNil sets the value for Timestamp to be an explicit nil
func (o *UpdateDatapointRequest) SetTimestampNil() {
	o.Timestamp.Set(nil)
}

// UnsetTimestamp ensures that no value is present for Timestamp, not even an explicit nil
func (o *UpdateDatapointRequest) UnsetTimestamp() {
	o.Timestamp.Unset()
}

// GetComment returns the Comment field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateDatapointRequest) GetComment() string {
	if o == nil || o.Comment.Get() == nil {
		var ret string
		return ret
	}
	return *o.Comment.Get()
}

// GetCommentOk returns a tuple with the Comment field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateDatapointRequest) GetCommentOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Comment.Get(), o.Comment.IsSet()
}

// HasComment returns a boolean if a field has been set.
func (o *UpdateDatapointRequest) HasComment() bool {
	if o != nil && o.Comment.IsSet() {
		return true
	}

	return false
}

// SetComment gets a reference to the given NullableString and assigns it to the Comment field.
func (o *UpdateDatapointRequest) SetComment(v string) {
	o.Comment.Set(&v)
}
// SetCommentNil sets the value for Comment to be an explicit nil
func (o *UpdateDatapointRequest) SetCommentNil() {
	o.Comment.Set(nil)
}

// UnsetComment ensures that no value is present for Comment, not even an explicit nil
func (o *UpdateDatapointRequest) UnsetComment() {
	o.Comment.Unset()
}

func (o UpdateDatapointRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Value.IsSet() {
		toSerialize["value"] = o.Value.Get()
	}
	if o.Timestamp.IsSet() {
		toSerialize["timestamp"] = o.Timestamp.Get()
	}
	if o.Comment.IsSet() {
		toSerialize["comment"] = o.Comment.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableUpdateDatapointRequest struct {
	value *UpdateDatapointRequest
	isSet bool
}

func (v NullableUpdateDatapointRequest) Get() *UpdateDatapointRequest {
	return v.value
}

func (v *NullableUpdateDatapointRequest) Set(val *UpdateDatapointRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateDatapointRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateDatapointRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateDatapointRequest(val *UpdateDatapointRequest) *NullableUpdateDatapointRequest {
	return &NullableUpdateDatapointRequest{value: val, isSet: true}
}

func (v NullableUpdateDatapointRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateDatapointRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


