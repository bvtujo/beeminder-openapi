/**
 * Beeminder
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { Datapoint } from './Datapoint';
import { GoalContract } from './GoalContract';
import { GoalDuebyValue } from './GoalDuebyValue';
import { GoalRecentDataInner } from './GoalRecentDataInner';
import { HttpFile } from '../http/http';

export class Goal {
    /**
    * The final part of the URL of the goal, used as an identifier.
    */
    'slug'?: string;
    'title'?: string;
    /**
    * Optional description.
    */
    'description'?: string;
    /**
    * The number the bright red line will eventually reach.
    */
    'goalval'?: number;
    /**
    * The slope of the (final section of the) bright red line in runits.
    */
    'rate'?: number;
    /**
    * The end date (unix timestamp) of the goal.
    */
    'goaldate'?: number;
    'svgUrl'?: string;
    'graphUrl'?: string;
    'thumbUrl'?: string;
    'goalType'?: GoalGoalTypeEnum;
    'autodata'?: string;
    'healthkitmetric'?: string;
    'losedate'?: number;
    /**
    * seconds by which the deadline differs from midnight
    */
    'deadline'?: number;
    /**
    * Days before deadline before we start sending you reminders.
    */
    'leadtime'?: number;
    /**
    * Seconds after midight that we start sending you reminders.
    */
    'alertstart'?: number;
    'useDefaults'?: boolean;
    /**
    * Unique hex identifier of goal
    */
    'id'?: string;
    'ephem'?: boolean;
    'queued'?: boolean;
    'panic'?: number;
    'updatedAt'?: number;
    'burner'?: GoalBurnerEnum;
    /**
    * Good side of the bright red line.
    */
    'yaw'?: GoalYawEnum;
    /**
    * See LoseDate and SafeBuf
    */
    'lane'?: number;
    'lanewidth'?: number;
    /**
    * Distance from the bright red line to today's datapoint
    */
    'delta'?: number;
    'runits'?: GoalRunitsEnum;
    /**
    * Summary of what you need to do eke by.
    */
    'limsum'?: string;
    /**
    * Whether the goal is currently frozen and therefore must be restarted before continuing to accept data.
    */
    'frozen'?: boolean;
    /**
    * Whether the goal is currently off track.
    */
    'lost'?: boolean;
    /**
    * Whether the goal has been successfully completed.
    */
    'won'?: boolean;
    'contract'?: GoalContract;
    'deltaText'?: string;
    /**
    * The absolute y-axis number you need to reach to get one additional day of safety buffer.
    */
    'safebump'?: number;
    'safesum'?: string;
    'limsumdate'?: string;
    'limsumdays'?: string;
    'baremin'?: string;
    'baremintotal'?: string;
    'roadstatuscolor'?: string;
    'lasttouch'?: string;
    /**
    * The integer number of safe days. If it's a beemergency this will be zero.
    */
    'safebuf'?: number;
    'coasting'?: boolean;
    /**
    * Assume that the units must be integer values. Used for things like limsum.
    */
    'integery'?: boolean;
    /**
    * The user-provided description of what exactly they are committing to.
    */
    'fineprint'?: string;
    /**
    * Whether there are any datapoints for today
    */
    'todayta'?: boolean;
    /**
    * Whether to show data in a \"timey\" way, with colons. For example, this would make a 1.5 show up as 1:30.
    */
    'hhmmformat'?: boolean;
    /**
    * Goal units, like \"hours\" or \"pushups\" or \"pages\".
    */
    'gunits'?: string;
    /**
    * If the goal has weekends automatically scheduled.
    */
    'weekendsOff'?: boolean;
    /**
    * The label for the y-axis of the graph. E.g., \"Cumulative total hours\".
    */
    'yaxis'?: string;
    /**
    * Max daily fluctuation for weight goals. Used as an absolute buffer amount on recommit. Also shown on the graph as a thick guiding line.
    */
    'maxflux'?: number;
    /**
    * Lower bound on x-axis; don't show data before this date; using yyyy-mm-dd date format.
    */
    'tmin'?: string;
    /**
    * Upper bound on x-axis; don't show data after this date; using yyyy-mm-dd date format.
    */
    'tmax'?: string;
    /**
    * Unix timestamp (in seconds) of the start of the bright red line.
    */
    'initday'?: number;
    /**
    * The y-value of the start of the bright red line.
    */
    'initval'?: number;
    /**
    * Unix timestamp (in seconds) of the end of the bright red line, i.e., the most recent (inferred) datapoint.
    */
    'curday'?: number;
    /**
    * The value of the most recent datapoint.
    */
    'curval'?: number;
    /**
    * Unix timestamp (in seconds) of the last (explicitly entered) datapoint.
    */
    'lastday'?: number;
    /**
    * Direction the bright red line is sloping, usually the same as yaw.
    */
    'dir'?: GoalDirEnum;
    /**
    * Cumulative; plot values as the sum of all those entered so far, aka auto-summing.
    */
    'kyoom'?: boolean;
    /**
    * Treat zeros as accidental odometer resets.
    */
    'odom'?: boolean;
    'noisy'?: boolean;
    /**
    * How to aggregate points on the same day, eg, min/max/mean.
    */
    'aggday'?: GoalAggdayEnum;
    /**
    * Whether to plot all the datapoints, or only the aggday'd one. So if false then only the official datapoint that's counted is plotted.
    */
    'plotall'?: boolean;
    /**
    * Join dots with purple steppy-style line.
    */
    'steppy'?: boolean;
    /**
    * Show the rose-colored dots and connecting line.
    */
    'rosy'?: boolean;
    /**
    * Show moving average line superimposed on the data.
    */
    'movingav'?: boolean;
    /**
    * Show turquoise swath, aka blue-green aura.
    */
    'aura'?: boolean;
    'numpts'?: number;
    /**
    * Array of tuples that can be used to construct the Bright Red Line (formerly \"Yellow Brick Road\"). This field is also known as the graph matrix. Each tuple specifies 2 out of 3 of [time, goal, rate]. To construct road, start with a known starting point (time, value) and then each row of the graph matrix specifies 2 out of 3 of {t,v,r} which gives the segment ending at time t. You can walk forward filling in the missing 1-out-of-3 from the (time, value) in the previous row.
    */
    'road'?: Array<Array<number>>;
    /**
    * Like road but with an additional initial row consisting of [initday, initval, null] and an additional final row consisting of [goaldate, goalval, rate]
    */
    'roadall'?: Array<Array<number>>;
    /**
    * Like roadall but with the nulls filled in.
    */
    'fullroad'?: Array<Array<number>>;
    /**
    * Whether you have to be logged in as owner of the goal to view it.
    */
    'secret'?: boolean;
    /**
    * Amount pledged (USD) on the goal.
    */
    'pledge'?: number;
    /**
    * The goaldate, goalval, and rate â€” all filled in. (The commitment dial specifies 2 out of 3 and you can check this if you want Beeminder to do the math for you on inferring the third one.)
    */
    'mathishard'?: Array<number>;
    /**
    * Deprecated. Summary text blurb saying how much safety buffer you have.
    */
    'headsum'?: string;
    /**
    * Whether you have to be logged in as the owner of the goal to view the datapoints
    */
    'datapublic'?: boolean;
    /**
    * Deprecated. Text summary of the graph, not used in the web UI anymore.
    */
    'graphsum'?: string;
    /**
    * Red line value (y-value of the bright red line) at the akrasia horizon (today plus one week).
    */
    'rah'?: number;
    'lastDatapoint'?: Datapoint;
    /**
    * Callback URL.WARNING: If different apps change this they'll step on each other's toes.
    */
    'callbackUrl'?: string;
    /**
    * A list of the goal's tags.
    */
    'tags'?: Array<string>;
    'recentData'?: Array<GoalRecentDataInner>;
    'dueby'?: { [key: string]: GoalDuebyValue; };
    'datapoints'?: Array<Datapoint>;

    static readonly discriminator: string | undefined = undefined;

    static readonly attributeTypeMap: Array<{name: string, baseName: string, type: string, format: string}> = [
        {
            "name": "slug",
            "baseName": "slug",
            "type": "string",
            "format": ""
        },
        {
            "name": "title",
            "baseName": "title",
            "type": "string",
            "format": ""
        },
        {
            "name": "description",
            "baseName": "description",
            "type": "string",
            "format": ""
        },
        {
            "name": "goalval",
            "baseName": "goalval",
            "type": "number",
            "format": ""
        },
        {
            "name": "rate",
            "baseName": "rate",
            "type": "number",
            "format": ""
        },
        {
            "name": "goaldate",
            "baseName": "goaldate",
            "type": "number",
            "format": ""
        },
        {
            "name": "svgUrl",
            "baseName": "svg_url",
            "type": "string",
            "format": ""
        },
        {
            "name": "graphUrl",
            "baseName": "graph_url",
            "type": "string",
            "format": ""
        },
        {
            "name": "thumbUrl",
            "baseName": "thumb_url",
            "type": "string",
            "format": ""
        },
        {
            "name": "goalType",
            "baseName": "goal_type",
            "type": "GoalGoalTypeEnum",
            "format": ""
        },
        {
            "name": "autodata",
            "baseName": "autodata",
            "type": "string",
            "format": ""
        },
        {
            "name": "healthkitmetric",
            "baseName": "healthkitmetric",
            "type": "string",
            "format": ""
        },
        {
            "name": "losedate",
            "baseName": "losedate",
            "type": "number",
            "format": ""
        },
        {
            "name": "deadline",
            "baseName": "deadline",
            "type": "number",
            "format": ""
        },
        {
            "name": "leadtime",
            "baseName": "leadtime",
            "type": "number",
            "format": ""
        },
        {
            "name": "alertstart",
            "baseName": "alertstart",
            "type": "number",
            "format": ""
        },
        {
            "name": "useDefaults",
            "baseName": "use_defaults",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "id",
            "baseName": "id",
            "type": "string",
            "format": ""
        },
        {
            "name": "ephem",
            "baseName": "ephem",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "queued",
            "baseName": "queued",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "panic",
            "baseName": "panic",
            "type": "number",
            "format": ""
        },
        {
            "name": "updatedAt",
            "baseName": "updated_at",
            "type": "number",
            "format": ""
        },
        {
            "name": "burner",
            "baseName": "burner",
            "type": "GoalBurnerEnum",
            "format": ""
        },
        {
            "name": "yaw",
            "baseName": "yaw",
            "type": "GoalYawEnum",
            "format": ""
        },
        {
            "name": "lane",
            "baseName": "lane",
            "type": "number",
            "format": ""
        },
        {
            "name": "lanewidth",
            "baseName": "lanewidth",
            "type": "number",
            "format": ""
        },
        {
            "name": "delta",
            "baseName": "delta",
            "type": "number",
            "format": ""
        },
        {
            "name": "runits",
            "baseName": "runits",
            "type": "GoalRunitsEnum",
            "format": ""
        },
        {
            "name": "limsum",
            "baseName": "limsum",
            "type": "string",
            "format": ""
        },
        {
            "name": "frozen",
            "baseName": "frozen",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "lost",
            "baseName": "lost",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "won",
            "baseName": "won",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "contract",
            "baseName": "contract",
            "type": "GoalContract",
            "format": ""
        },
        {
            "name": "deltaText",
            "baseName": "delta_text",
            "type": "string",
            "format": ""
        },
        {
            "name": "safebump",
            "baseName": "safebump",
            "type": "number",
            "format": ""
        },
        {
            "name": "safesum",
            "baseName": "safesum",
            "type": "string",
            "format": ""
        },
        {
            "name": "limsumdate",
            "baseName": "limsumdate",
            "type": "string",
            "format": ""
        },
        {
            "name": "limsumdays",
            "baseName": "limsumdays",
            "type": "string",
            "format": ""
        },
        {
            "name": "baremin",
            "baseName": "baremin",
            "type": "string",
            "format": ""
        },
        {
            "name": "baremintotal",
            "baseName": "baremintotal",
            "type": "string",
            "format": ""
        },
        {
            "name": "roadstatuscolor",
            "baseName": "roadstatuscolor",
            "type": "string",
            "format": ""
        },
        {
            "name": "lasttouch",
            "baseName": "lasttouch",
            "type": "string",
            "format": ""
        },
        {
            "name": "safebuf",
            "baseName": "safebuf",
            "type": "number",
            "format": ""
        },
        {
            "name": "coasting",
            "baseName": "coasting",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "integery",
            "baseName": "integery",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "fineprint",
            "baseName": "fineprint",
            "type": "string",
            "format": ""
        },
        {
            "name": "todayta",
            "baseName": "todayta",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "hhmmformat",
            "baseName": "hhmmformat",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "gunits",
            "baseName": "gunits",
            "type": "string",
            "format": ""
        },
        {
            "name": "weekendsOff",
            "baseName": "weekends_off",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "yaxis",
            "baseName": "yaxis",
            "type": "string",
            "format": ""
        },
        {
            "name": "maxflux",
            "baseName": "maxflux",
            "type": "number",
            "format": ""
        },
        {
            "name": "tmin",
            "baseName": "tmin",
            "type": "string",
            "format": ""
        },
        {
            "name": "tmax",
            "baseName": "tmax",
            "type": "string",
            "format": ""
        },
        {
            "name": "initday",
            "baseName": "initday",
            "type": "number",
            "format": ""
        },
        {
            "name": "initval",
            "baseName": "initval",
            "type": "number",
            "format": ""
        },
        {
            "name": "curday",
            "baseName": "curday",
            "type": "number",
            "format": ""
        },
        {
            "name": "curval",
            "baseName": "curval",
            "type": "number",
            "format": ""
        },
        {
            "name": "lastday",
            "baseName": "lastday",
            "type": "number",
            "format": ""
        },
        {
            "name": "dir",
            "baseName": "dir",
            "type": "GoalDirEnum",
            "format": ""
        },
        {
            "name": "kyoom",
            "baseName": "kyoom",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "odom",
            "baseName": "odom",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "noisy",
            "baseName": "noisy",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "aggday",
            "baseName": "aggday",
            "type": "GoalAggdayEnum",
            "format": ""
        },
        {
            "name": "plotall",
            "baseName": "plotall",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "steppy",
            "baseName": "steppy",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "rosy",
            "baseName": "rosy",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "movingav",
            "baseName": "movingav",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "aura",
            "baseName": "aura",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "numpts",
            "baseName": "numpts",
            "type": "number",
            "format": ""
        },
        {
            "name": "road",
            "baseName": "road",
            "type": "Array<Array<number>>",
            "format": ""
        },
        {
            "name": "roadall",
            "baseName": "roadall",
            "type": "Array<Array<number>>",
            "format": ""
        },
        {
            "name": "fullroad",
            "baseName": "fullroad",
            "type": "Array<Array<number>>",
            "format": ""
        },
        {
            "name": "secret",
            "baseName": "secret",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "pledge",
            "baseName": "pledge",
            "type": "number",
            "format": ""
        },
        {
            "name": "mathishard",
            "baseName": "mathishard",
            "type": "Array<number>",
            "format": ""
        },
        {
            "name": "headsum",
            "baseName": "headsum",
            "type": "string",
            "format": ""
        },
        {
            "name": "datapublic",
            "baseName": "datapublic",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "graphsum",
            "baseName": "graphsum",
            "type": "string",
            "format": ""
        },
        {
            "name": "rah",
            "baseName": "rah",
            "type": "number",
            "format": ""
        },
        {
            "name": "lastDatapoint",
            "baseName": "last_datapoint",
            "type": "Datapoint",
            "format": ""
        },
        {
            "name": "callbackUrl",
            "baseName": "callback_url",
            "type": "string",
            "format": ""
        },
        {
            "name": "tags",
            "baseName": "tags",
            "type": "Array<string>",
            "format": ""
        },
        {
            "name": "recentData",
            "baseName": "recent_data",
            "type": "Array<GoalRecentDataInner>",
            "format": ""
        },
        {
            "name": "dueby",
            "baseName": "dueby",
            "type": "{ [key: string]: GoalDuebyValue; }",
            "format": ""
        },
        {
            "name": "datapoints",
            "baseName": "datapoints",
            "type": "Array<Datapoint>",
            "format": ""
        }    ];

    static getAttributeTypeMap() {
        return Goal.attributeTypeMap;
    }

    public constructor() {
    }
}


export type GoalGoalTypeEnum = "hustler" | "biker" | "fatloser" | "gainer" | "inboxer" | "drinker" | "custom" ;
export type GoalBurnerEnum = "frontburner" | "backburner" ;
export type GoalYawEnum = "-1" | "1" ;
export type GoalRunitsEnum = "y" | "m" | "w" | "d" | "h" ;
export type GoalDirEnum = "1" | "-1" ;
export type GoalAggdayEnum = "last" | "first" | "min" | "max" | "truemean" | "uniqmean" | "mean" | "median" | "mode" | "trimmean" | "sum" | "jolly" | "binary" | "nonzero" | "triangle" | "square" | "clocky" | "count" | "skatesum" | "cap1" ;

