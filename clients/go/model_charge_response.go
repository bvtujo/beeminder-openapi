/*
Beeminder

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
Contact: austinrossely@gmail.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// ChargeResponse Beeminder provides an endpoint to charge an arbitrary amount to a Beeminder user. The user is inferred from the access_token or auth_token provided.
type ChargeResponse struct {
	// The unique ID of the charge.
	Id *string `json:"id,omitempty"`
	// The amount of the charge.
	Amount *float32 `json:"amount,omitempty"`
	// An optional note describing the charge.
	Note *string `json:"note,omitempty"`
	// The user id this charge was applied to.
	UserId *string `json:"user_id,omitempty"`
}

// NewChargeResponse instantiates a new ChargeResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewChargeResponse() *ChargeResponse {
	this := ChargeResponse{}
	return &this
}

// NewChargeResponseWithDefaults instantiates a new ChargeResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewChargeResponseWithDefaults() *ChargeResponse {
	this := ChargeResponse{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ChargeResponse) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChargeResponse) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ChargeResponse) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *ChargeResponse) SetId(v string) {
	o.Id = &v
}

// GetAmount returns the Amount field value if set, zero value otherwise.
func (o *ChargeResponse) GetAmount() float32 {
	if o == nil || o.Amount == nil {
		var ret float32
		return ret
	}
	return *o.Amount
}

// GetAmountOk returns a tuple with the Amount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChargeResponse) GetAmountOk() (*float32, bool) {
	if o == nil || o.Amount == nil {
		return nil, false
	}
	return o.Amount, true
}

// HasAmount returns a boolean if a field has been set.
func (o *ChargeResponse) HasAmount() bool {
	if o != nil && o.Amount != nil {
		return true
	}

	return false
}

// SetAmount gets a reference to the given float32 and assigns it to the Amount field.
func (o *ChargeResponse) SetAmount(v float32) {
	o.Amount = &v
}

// GetNote returns the Note field value if set, zero value otherwise.
func (o *ChargeResponse) GetNote() string {
	if o == nil || o.Note == nil {
		var ret string
		return ret
	}
	return *o.Note
}

// GetNoteOk returns a tuple with the Note field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChargeResponse) GetNoteOk() (*string, bool) {
	if o == nil || o.Note == nil {
		return nil, false
	}
	return o.Note, true
}

// HasNote returns a boolean if a field has been set.
func (o *ChargeResponse) HasNote() bool {
	if o != nil && o.Note != nil {
		return true
	}

	return false
}

// SetNote gets a reference to the given string and assigns it to the Note field.
func (o *ChargeResponse) SetNote(v string) {
	o.Note = &v
}

// GetUserId returns the UserId field value if set, zero value otherwise.
func (o *ChargeResponse) GetUserId() string {
	if o == nil || o.UserId == nil {
		var ret string
		return ret
	}
	return *o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChargeResponse) GetUserIdOk() (*string, bool) {
	if o == nil || o.UserId == nil {
		return nil, false
	}
	return o.UserId, true
}

// HasUserId returns a boolean if a field has been set.
func (o *ChargeResponse) HasUserId() bool {
	if o != nil && o.UserId != nil {
		return true
	}

	return false
}

// SetUserId gets a reference to the given string and assigns it to the UserId field.
func (o *ChargeResponse) SetUserId(v string) {
	o.UserId = &v
}

func (o ChargeResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Amount != nil {
		toSerialize["amount"] = o.Amount
	}
	if o.Note != nil {
		toSerialize["note"] = o.Note
	}
	if o.UserId != nil {
		toSerialize["user_id"] = o.UserId
	}
	return json.Marshal(toSerialize)
}

type NullableChargeResponse struct {
	value *ChargeResponse
	isSet bool
}

func (v NullableChargeResponse) Get() *ChargeResponse {
	return v.value
}

func (v *NullableChargeResponse) Set(val *ChargeResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableChargeResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableChargeResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableChargeResponse(val *ChargeResponse) *NullableChargeResponse {
	return &NullableChargeResponse{value: val, isSet: true}
}

func (v NullableChargeResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableChargeResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


