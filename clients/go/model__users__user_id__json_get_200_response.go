/*
Beeminder

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// UsersUserIdJsonGet200Response - struct for UsersUserIdJsonGet200Response
type UsersUserIdJsonGet200Response struct {
	SmallUser *SmallUser
}

// SmallUserAsUsersUserIdJsonGet200Response is a convenience function that returns SmallUser wrapped in UsersUserIdJsonGet200Response
func SmallUserAsUsersUserIdJsonGet200Response(v *SmallUser) UsersUserIdJsonGet200Response {
	return UsersUserIdJsonGet200Response{
		SmallUser: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *UsersUserIdJsonGet200Response) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into SmallUser
	err = newStrictDecoder(data).Decode(&dst.SmallUser)
	if err == nil {
		jsonSmallUser, _ := json.Marshal(dst.SmallUser)
		if string(jsonSmallUser) == "{}" { // empty struct
			dst.SmallUser = nil
		} else {
			match++
		}
	} else {
		dst.SmallUser = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.SmallUser = nil

		return fmt.Errorf("Data matches more than one schema in oneOf(UsersUserIdJsonGet200Response)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("Data failed to match schemas in oneOf(UsersUserIdJsonGet200Response)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src UsersUserIdJsonGet200Response) MarshalJSON() ([]byte, error) {
	if src.SmallUser != nil {
		return json.Marshal(&src.SmallUser)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *UsersUserIdJsonGet200Response) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.SmallUser != nil {
		return obj.SmallUser
	}

	// all schemas are nil
	return nil
}

type NullableUsersUserIdJsonGet200Response struct {
	value *UsersUserIdJsonGet200Response
	isSet bool
}

func (v NullableUsersUserIdJsonGet200Response) Get() *UsersUserIdJsonGet200Response {
	return v.value
}

func (v *NullableUsersUserIdJsonGet200Response) Set(val *UsersUserIdJsonGet200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableUsersUserIdJsonGet200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableUsersUserIdJsonGet200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUsersUserIdJsonGet200Response(val *UsersUserIdJsonGet200Response) *NullableUsersUserIdJsonGet200Response {
	return &NullableUsersUserIdJsonGet200Response{value: val, isSet: true}
}

func (v NullableUsersUserIdJsonGet200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUsersUserIdJsonGet200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


