/*
Beeminder

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
Contact: austinrossely@gmail.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// Goal struct for Goal
type Goal struct {
	// The final part of the URL of the goal, used as an identifier.
	Slug *string `json:"slug,omitempty"`
	Title *string `json:"title,omitempty"`
	// Optional description.
	Description *string `json:"description,omitempty"`
	// The number the bright red line will eventually reach.
	Goalval NullableFloat32 `json:"goalval,omitempty"`
	// The slope of the (final section of the) bright red line in runits.
	Rate NullableFloat32 `json:"rate,omitempty"`
	// The end date (unix timestamp) of the goal.
	Goaldate NullableFloat32 `json:"goaldate,omitempty"`
	SvgUrl *string `json:"svg_url,omitempty"`
	GraphUrl *string `json:"graph_url,omitempty"`
	ThumbUrl *string `json:"thumb_url,omitempty"`
	GoalType *string `json:"goal_type,omitempty"`
	Autodata NullableString `json:"autodata,omitempty"`
	Healthkitmetric *string `json:"healthkitmetric,omitempty"`
	Losedate *int32 `json:"losedate,omitempty"`
	// seconds by which the deadline differs from midnight
	Deadline *int32 `json:"deadline,omitempty"`
	// Days before deadline before we start sending you reminders.
	Leadtime *int32 `json:"leadtime,omitempty"`
	// Seconds after midight that we start sending you reminders.
	Alertstart *int32 `json:"alertstart,omitempty"`
	UseDefaults *bool `json:"use_defaults,omitempty"`
	// Unique hex identifier of goal
	Id *string `json:"id,omitempty"`
	Ephem *bool `json:"ephem,omitempty"`
	Queued *bool `json:"queued,omitempty"`
	Panic *int32 `json:"panic,omitempty"`
	UpdatedAt *int32 `json:"updated_at,omitempty"`
	// Deprecated
	Burner *string `json:"burner,omitempty"`
	// Good side of the bright red line.
	Yaw *int32 `json:"yaw,omitempty"`
	// See LoseDate and SafeBuf
	// Deprecated
	Lane *int32 `json:"lane,omitempty"`
	// Deprecated
	Lanewidth *float32 `json:"lanewidth,omitempty"`
	// Distance from the bright red line to today's datapoint
	Delta *float32 `json:"delta,omitempty"`
	Runits *string `json:"runits,omitempty"`
	// Summary of what you need to do eke by.
	Limsum *string `json:"limsum,omitempty"`
	// Whether the goal is currently frozen and therefore must be restarted before continuing to accept data.
	Frozen *bool `json:"frozen,omitempty"`
	// Whether the goal is currently off track.
	Lost *bool `json:"lost,omitempty"`
	// Whether the goal has been successfully completed.
	Won *bool `json:"won,omitempty"`
	Contract *GoalContract `json:"contract,omitempty"`
	// Deprecated
	DeltaText *string `json:"delta_text,omitempty"`
	// The absolute y-axis number you need to reach to get one additional day of safety buffer.
	Safebump *float32 `json:"safebump,omitempty"`
	Safesum *string `json:"safesum,omitempty"`
	Limsumdate *string `json:"limsumdate,omitempty"`
	Limsumdays *string `json:"limsumdays,omitempty"`
	Baremin *string `json:"baremin,omitempty"`
	Baremintotal *string `json:"baremintotal,omitempty"`
	Roadstatuscolor *string `json:"roadstatuscolor,omitempty"`
	Lasttouch *string `json:"lasttouch,omitempty"`
	// The integer number of safe days. If it's a beemergency this will be zero.
	Safebuf *float32 `json:"safebuf,omitempty"`
	Coasting *bool `json:"coasting,omitempty"`
	// Assume that the units must be integer values. Used for things like limsum.
	Integery *bool `json:"integery,omitempty"`
	// The user-provided description of what exactly they are committing to.
	Fineprint *string `json:"fineprint,omitempty"`
	// Whether there are any datapoints for today
	Todayta *bool `json:"todayta,omitempty"`
	// Whether to show data in a \"timey\" way, with colons. For example, this would make a 1.5 show up as 1:30.
	Hhmmformat *bool `json:"hhmmformat,omitempty"`
	// Goal units, like \"hours\" or \"pushups\" or \"pages\".
	Gunits *string `json:"gunits,omitempty"`
	// If the goal has weekends automatically scheduled.
	WeekendsOff *bool `json:"weekends_off,omitempty"`
	// The label for the y-axis of the graph. E.g., \"Cumulative total hours\".
	Yaxis *string `json:"yaxis,omitempty"`
	// Max daily fluctuation for weight goals. Used as an absolute buffer amount on recommit. Also shown on the graph as a thick guiding line.
	Maxflux NullableFloat32 `json:"maxflux,omitempty"`
	// Lower bound on x-axis; don't show data before this date; using yyyy-mm-dd date format.
	Tmin NullableString `json:"tmin,omitempty"`
	// Upper bound on x-axis; don't show data after this date; using yyyy-mm-dd date format.
	Tmax NullableString `json:"tmax,omitempty"`
	// Unix timestamp (in seconds) of the start of the bright red line.
	Initday *int32 `json:"initday,omitempty"`
	// The y-value of the start of the bright red line.
	Initval *float32 `json:"initval,omitempty"`
	// Unix timestamp (in seconds) of the end of the bright red line, i.e., the most recent (inferred) datapoint.
	Curday *float32 `json:"curday,omitempty"`
	// The value of the most recent datapoint.
	Curval *float32 `json:"curval,omitempty"`
	// Unix timestamp (in seconds) of the last (explicitly entered) datapoint.
	Lastday *float32 `json:"lastday,omitempty"`
	// Direction the bright red line is sloping, usually the same as yaw.
	Dir *float32 `json:"dir,omitempty"`
	// Cumulative; plot values as the sum of all those entered so far, aka auto-summing.
	Kyoom *bool `json:"kyoom,omitempty"`
	// Treat zeros as accidental odometer resets.
	Odom *bool `json:"odom,omitempty"`
	Noisy *bool `json:"noisy,omitempty"`
	// How to aggregate points on the same day, eg, min/max/mean.
	Aggday *string `json:"aggday,omitempty"`
	// Whether to plot all the datapoints, or only the aggday'd one. So if false then only the official datapoint that's counted is plotted.
	Plotall *bool `json:"plotall,omitempty"`
	// Join dots with purple steppy-style line.
	Steppy *bool `json:"steppy,omitempty"`
	// Show the rose-colored dots and connecting line.
	Rosy *bool `json:"rosy,omitempty"`
	// Show moving average line superimposed on the data.
	Movingav *bool `json:"movingav,omitempty"`
	// Show turquoise swath, aka blue-green aura.
	Aura *bool `json:"aura,omitempty"`
	Numpts *float32 `json:"numpts,omitempty"`
	// Array of tuples that can be used to construct the Bright Red Line (formerly \"Yellow Brick Road\"). This field is also known as the graph matrix. Each tuple specifies 2 out of 3 of [time, goal, rate]. To construct road, start with a known starting point (time, value) and then each row of the graph matrix specifies 2 out of 3 of {t,v,r} which gives the segment ending at time t. You can walk forward filling in the missing 1-out-of-3 from the (time, value) in the previous row.
	Road [][]*float32 `json:"road,omitempty"`
	// Like road but with an additional initial row consisting of [initday, initval, null] and an additional final row consisting of [goaldate, goalval, rate]
	Roadall [][]*float32 `json:"roadall,omitempty"`
	// Like roadall but with the nulls filled in.
	Fullroad [][]float32 `json:"fullroad,omitempty"`
	// Whether you have to be logged in as owner of the goal to view it.
	Secret *bool `json:"secret,omitempty"`
	// Amount pledged (USD) on the goal.
	Pledge *float32 `json:"pledge,omitempty"`
	// The goaldate, goalval, and rate â€” all filled in. (The commitment dial specifies 2 out of 3 and you can check this if you want Beeminder to do the math for you on inferring the third one.)
	Mathishard []float32 `json:"mathishard,omitempty"`
	// Deprecated. Summary text blurb saying how much safety buffer you have.
	// Deprecated
	Headsum *string `json:"headsum,omitempty"`
	// Whether you have to be logged in as the owner of the goal to view the datapoints
	Datapublic *bool `json:"datapublic,omitempty"`
	// Deprecated. Text summary of the graph, not used in the web UI anymore.
	// Deprecated
	Graphsum *string `json:"graphsum,omitempty"`
	// Red line value (y-value of the bright red line) at the akrasia horizon (today plus one week).
	Rah *float32 `json:"rah,omitempty"`
	LastDatapoint *Datapoint `json:"last_datapoint,omitempty"`
	// Callback URL.WARNING: If different apps change this they'll step on each other's toes.
	CallbackUrl NullableString `json:"callback_url,omitempty"`
	// A list of the goal's tags.
	Tags []string `json:"tags,omitempty"`
	RecentData []GoalRecentDataInner `json:"recent_data,omitempty"`
	Dueby *map[string]GoalDuebyValue `json:"dueby,omitempty"`
	Datapoints []Datapoint `json:"datapoints,omitempty"`
}

// NewGoal instantiates a new Goal object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGoal() *Goal {
	this := Goal{}
	var secret bool = false
	this.Secret = &secret
	return &this
}

// NewGoalWithDefaults instantiates a new Goal object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGoalWithDefaults() *Goal {
	this := Goal{}
	var secret bool = false
	this.Secret = &secret
	return &this
}

// GetSlug returns the Slug field value if set, zero value otherwise.
func (o *Goal) GetSlug() string {
	if o == nil || o.Slug == nil {
		var ret string
		return ret
	}
	return *o.Slug
}

// GetSlugOk returns a tuple with the Slug field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Goal) GetSlugOk() (*string, bool) {
	if o == nil || o.Slug == nil {
		return nil, false
	}
	return o.Slug, true
}

// HasSlug returns a boolean if a field has been set.
func (o *Goal) HasSlug() bool {
	if o != nil && o.Slug != nil {
		return true
	}

	return false
}

// SetSlug gets a reference to the given string and assigns it to the Slug field.
func (o *Goal) SetSlug(v string) {
	o.Slug = &v
}

// GetTitle returns the Title field value if set, zero value otherwise.
func (o *Goal) GetTitle() string {
	if o == nil || o.Title == nil {
		var ret string
		return ret
	}
	return *o.Title
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Goal) GetTitleOk() (*string, bool) {
	if o == nil || o.Title == nil {
		return nil, false
	}
	return o.Title, true
}

// HasTitle returns a boolean if a field has been set.
func (o *Goal) HasTitle() bool {
	if o != nil && o.Title != nil {
		return true
	}

	return false
}

// SetTitle gets a reference to the given string and assigns it to the Title field.
func (o *Goal) SetTitle(v string) {
	o.Title = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *Goal) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Goal) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *Goal) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *Goal) SetDescription(v string) {
	o.Description = &v
}

// GetGoalval returns the Goalval field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Goal) GetGoalval() float32 {
	if o == nil || o.Goalval.Get() == nil {
		var ret float32
		return ret
	}
	return *o.Goalval.Get()
}

// GetGoalvalOk returns a tuple with the Goalval field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Goal) GetGoalvalOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Goalval.Get(), o.Goalval.IsSet()
}

// HasGoalval returns a boolean if a field has been set.
func (o *Goal) HasGoalval() bool {
	if o != nil && o.Goalval.IsSet() {
		return true
	}

	return false
}

// SetGoalval gets a reference to the given NullableFloat32 and assigns it to the Goalval field.
func (o *Goal) SetGoalval(v float32) {
	o.Goalval.Set(&v)
}
// SetGoalvalNil sets the value for Goalval to be an explicit nil
func (o *Goal) SetGoalvalNil() {
	o.Goalval.Set(nil)
}

// UnsetGoalval ensures that no value is present for Goalval, not even an explicit nil
func (o *Goal) UnsetGoalval() {
	o.Goalval.Unset()
}

// GetRate returns the Rate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Goal) GetRate() float32 {
	if o == nil || o.Rate.Get() == nil {
		var ret float32
		return ret
	}
	return *o.Rate.Get()
}

// GetRateOk returns a tuple with the Rate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Goal) GetRateOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Rate.Get(), o.Rate.IsSet()
}

// HasRate returns a boolean if a field has been set.
func (o *Goal) HasRate() bool {
	if o != nil && o.Rate.IsSet() {
		return true
	}

	return false
}

// SetRate gets a reference to the given NullableFloat32 and assigns it to the Rate field.
func (o *Goal) SetRate(v float32) {
	o.Rate.Set(&v)
}
// SetRateNil sets the value for Rate to be an explicit nil
func (o *Goal) SetRateNil() {
	o.Rate.Set(nil)
}

// UnsetRate ensures that no value is present for Rate, not even an explicit nil
func (o *Goal) UnsetRate() {
	o.Rate.Unset()
}

// GetGoaldate returns the Goaldate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Goal) GetGoaldate() float32 {
	if o == nil || o.Goaldate.Get() == nil {
		var ret float32
		return ret
	}
	return *o.Goaldate.Get()
}

// GetGoaldateOk returns a tuple with the Goaldate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Goal) GetGoaldateOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Goaldate.Get(), o.Goaldate.IsSet()
}

// HasGoaldate returns a boolean if a field has been set.
func (o *Goal) HasGoaldate() bool {
	if o != nil && o.Goaldate.IsSet() {
		return true
	}

	return false
}

// SetGoaldate gets a reference to the given NullableFloat32 and assigns it to the Goaldate field.
func (o *Goal) SetGoaldate(v float32) {
	o.Goaldate.Set(&v)
}
// SetGoaldateNil sets the value for Goaldate to be an explicit nil
func (o *Goal) SetGoaldateNil() {
	o.Goaldate.Set(nil)
}

// UnsetGoaldate ensures that no value is present for Goaldate, not even an explicit nil
func (o *Goal) UnsetGoaldate() {
	o.Goaldate.Unset()
}

// GetSvgUrl returns the SvgUrl field value if set, zero value otherwise.
func (o *Goal) GetSvgUrl() string {
	if o == nil || o.SvgUrl == nil {
		var ret string
		return ret
	}
	return *o.SvgUrl
}

// GetSvgUrlOk returns a tuple with the SvgUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Goal) GetSvgUrlOk() (*string, bool) {
	if o == nil || o.SvgUrl == nil {
		return nil, false
	}
	return o.SvgUrl, true
}

// HasSvgUrl returns a boolean if a field has been set.
func (o *Goal) HasSvgUrl() bool {
	if o != nil && o.SvgUrl != nil {
		return true
	}

	return false
}

// SetSvgUrl gets a reference to the given string and assigns it to the SvgUrl field.
func (o *Goal) SetSvgUrl(v string) {
	o.SvgUrl = &v
}

// GetGraphUrl returns the GraphUrl field value if set, zero value otherwise.
func (o *Goal) GetGraphUrl() string {
	if o == nil || o.GraphUrl == nil {
		var ret string
		return ret
	}
	return *o.GraphUrl
}

// GetGraphUrlOk returns a tuple with the GraphUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Goal) GetGraphUrlOk() (*string, bool) {
	if o == nil || o.GraphUrl == nil {
		return nil, false
	}
	return o.GraphUrl, true
}

// HasGraphUrl returns a boolean if a field has been set.
func (o *Goal) HasGraphUrl() bool {
	if o != nil && o.GraphUrl != nil {
		return true
	}

	return false
}

// SetGraphUrl gets a reference to the given string and assigns it to the GraphUrl field.
func (o *Goal) SetGraphUrl(v string) {
	o.GraphUrl = &v
}

// GetThumbUrl returns the ThumbUrl field value if set, zero value otherwise.
func (o *Goal) GetThumbUrl() string {
	if o == nil || o.ThumbUrl == nil {
		var ret string
		return ret
	}
	return *o.ThumbUrl
}

// GetThumbUrlOk returns a tuple with the ThumbUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Goal) GetThumbUrlOk() (*string, bool) {
	if o == nil || o.ThumbUrl == nil {
		return nil, false
	}
	return o.ThumbUrl, true
}

// HasThumbUrl returns a boolean if a field has been set.
func (o *Goal) HasThumbUrl() bool {
	if o != nil && o.ThumbUrl != nil {
		return true
	}

	return false
}

// SetThumbUrl gets a reference to the given string and assigns it to the ThumbUrl field.
func (o *Goal) SetThumbUrl(v string) {
	o.ThumbUrl = &v
}

// GetGoalType returns the GoalType field value if set, zero value otherwise.
func (o *Goal) GetGoalType() string {
	if o == nil || o.GoalType == nil {
		var ret string
		return ret
	}
	return *o.GoalType
}

// GetGoalTypeOk returns a tuple with the GoalType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Goal) GetGoalTypeOk() (*string, bool) {
	if o == nil || o.GoalType == nil {
		return nil, false
	}
	return o.GoalType, true
}

// HasGoalType returns a boolean if a field has been set.
func (o *Goal) HasGoalType() bool {
	if o != nil && o.GoalType != nil {
		return true
	}

	return false
}

// SetGoalType gets a reference to the given string and assigns it to the GoalType field.
func (o *Goal) SetGoalType(v string) {
	o.GoalType = &v
}

// GetAutodata returns the Autodata field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Goal) GetAutodata() string {
	if o == nil || o.Autodata.Get() == nil {
		var ret string
		return ret
	}
	return *o.Autodata.Get()
}

// GetAutodataOk returns a tuple with the Autodata field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Goal) GetAutodataOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Autodata.Get(), o.Autodata.IsSet()
}

// HasAutodata returns a boolean if a field has been set.
func (o *Goal) HasAutodata() bool {
	if o != nil && o.Autodata.IsSet() {
		return true
	}

	return false
}

// SetAutodata gets a reference to the given NullableString and assigns it to the Autodata field.
func (o *Goal) SetAutodata(v string) {
	o.Autodata.Set(&v)
}
// SetAutodataNil sets the value for Autodata to be an explicit nil
func (o *Goal) SetAutodataNil() {
	o.Autodata.Set(nil)
}

// UnsetAutodata ensures that no value is present for Autodata, not even an explicit nil
func (o *Goal) UnsetAutodata() {
	o.Autodata.Unset()
}

// GetHealthkitmetric returns the Healthkitmetric field value if set, zero value otherwise.
func (o *Goal) GetHealthkitmetric() string {
	if o == nil || o.Healthkitmetric == nil {
		var ret string
		return ret
	}
	return *o.Healthkitmetric
}

// GetHealthkitmetricOk returns a tuple with the Healthkitmetric field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Goal) GetHealthkitmetricOk() (*string, bool) {
	if o == nil || o.Healthkitmetric == nil {
		return nil, false
	}
	return o.Healthkitmetric, true
}

// HasHealthkitmetric returns a boolean if a field has been set.
func (o *Goal) HasHealthkitmetric() bool {
	if o != nil && o.Healthkitmetric != nil {
		return true
	}

	return false
}

// SetHealthkitmetric gets a reference to the given string and assigns it to the Healthkitmetric field.
func (o *Goal) SetHealthkitmetric(v string) {
	o.Healthkitmetric = &v
}

// GetLosedate returns the Losedate field value if set, zero value otherwise.
func (o *Goal) GetLosedate() int32 {
	if o == nil || o.Losedate == nil {
		var ret int32
		return ret
	}
	return *o.Losedate
}

// GetLosedateOk returns a tuple with the Losedate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Goal) GetLosedateOk() (*int32, bool) {
	if o == nil || o.Losedate == nil {
		return nil, false
	}
	return o.Losedate, true
}

// HasLosedate returns a boolean if a field has been set.
func (o *Goal) HasLosedate() bool {
	if o != nil && o.Losedate != nil {
		return true
	}

	return false
}

// SetLosedate gets a reference to the given int32 and assigns it to the Losedate field.
func (o *Goal) SetLosedate(v int32) {
	o.Losedate = &v
}

// GetDeadline returns the Deadline field value if set, zero value otherwise.
func (o *Goal) GetDeadline() int32 {
	if o == nil || o.Deadline == nil {
		var ret int32
		return ret
	}
	return *o.Deadline
}

// GetDeadlineOk returns a tuple with the Deadline field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Goal) GetDeadlineOk() (*int32, bool) {
	if o == nil || o.Deadline == nil {
		return nil, false
	}
	return o.Deadline, true
}

// HasDeadline returns a boolean if a field has been set.
func (o *Goal) HasDeadline() bool {
	if o != nil && o.Deadline != nil {
		return true
	}

	return false
}

// SetDeadline gets a reference to the given int32 and assigns it to the Deadline field.
func (o *Goal) SetDeadline(v int32) {
	o.Deadline = &v
}

// GetLeadtime returns the Leadtime field value if set, zero value otherwise.
func (o *Goal) GetLeadtime() int32 {
	if o == nil || o.Leadtime == nil {
		var ret int32
		return ret
	}
	return *o.Leadtime
}

// GetLeadtimeOk returns a tuple with the Leadtime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Goal) GetLeadtimeOk() (*int32, bool) {
	if o == nil || o.Leadtime == nil {
		return nil, false
	}
	return o.Leadtime, true
}

// HasLeadtime returns a boolean if a field has been set.
func (o *Goal) HasLeadtime() bool {
	if o != nil && o.Leadtime != nil {
		return true
	}

	return false
}

// SetLeadtime gets a reference to the given int32 and assigns it to the Leadtime field.
func (o *Goal) SetLeadtime(v int32) {
	o.Leadtime = &v
}

// GetAlertstart returns the Alertstart field value if set, zero value otherwise.
func (o *Goal) GetAlertstart() int32 {
	if o == nil || o.Alertstart == nil {
		var ret int32
		return ret
	}
	return *o.Alertstart
}

// GetAlertstartOk returns a tuple with the Alertstart field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Goal) GetAlertstartOk() (*int32, bool) {
	if o == nil || o.Alertstart == nil {
		return nil, false
	}
	return o.Alertstart, true
}

// HasAlertstart returns a boolean if a field has been set.
func (o *Goal) HasAlertstart() bool {
	if o != nil && o.Alertstart != nil {
		return true
	}

	return false
}

// SetAlertstart gets a reference to the given int32 and assigns it to the Alertstart field.
func (o *Goal) SetAlertstart(v int32) {
	o.Alertstart = &v
}

// GetUseDefaults returns the UseDefaults field value if set, zero value otherwise.
func (o *Goal) GetUseDefaults() bool {
	if o == nil || o.UseDefaults == nil {
		var ret bool
		return ret
	}
	return *o.UseDefaults
}

// GetUseDefaultsOk returns a tuple with the UseDefaults field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Goal) GetUseDefaultsOk() (*bool, bool) {
	if o == nil || o.UseDefaults == nil {
		return nil, false
	}
	return o.UseDefaults, true
}

// HasUseDefaults returns a boolean if a field has been set.
func (o *Goal) HasUseDefaults() bool {
	if o != nil && o.UseDefaults != nil {
		return true
	}

	return false
}

// SetUseDefaults gets a reference to the given bool and assigns it to the UseDefaults field.
func (o *Goal) SetUseDefaults(v bool) {
	o.UseDefaults = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Goal) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Goal) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Goal) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *Goal) SetId(v string) {
	o.Id = &v
}

// GetEphem returns the Ephem field value if set, zero value otherwise.
func (o *Goal) GetEphem() bool {
	if o == nil || o.Ephem == nil {
		var ret bool
		return ret
	}
	return *o.Ephem
}

// GetEphemOk returns a tuple with the Ephem field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Goal) GetEphemOk() (*bool, bool) {
	if o == nil || o.Ephem == nil {
		return nil, false
	}
	return o.Ephem, true
}

// HasEphem returns a boolean if a field has been set.
func (o *Goal) HasEphem() bool {
	if o != nil && o.Ephem != nil {
		return true
	}

	return false
}

// SetEphem gets a reference to the given bool and assigns it to the Ephem field.
func (o *Goal) SetEphem(v bool) {
	o.Ephem = &v
}

// GetQueued returns the Queued field value if set, zero value otherwise.
func (o *Goal) GetQueued() bool {
	if o == nil || o.Queued == nil {
		var ret bool
		return ret
	}
	return *o.Queued
}

// GetQueuedOk returns a tuple with the Queued field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Goal) GetQueuedOk() (*bool, bool) {
	if o == nil || o.Queued == nil {
		return nil, false
	}
	return o.Queued, true
}

// HasQueued returns a boolean if a field has been set.
func (o *Goal) HasQueued() bool {
	if o != nil && o.Queued != nil {
		return true
	}

	return false
}

// SetQueued gets a reference to the given bool and assigns it to the Queued field.
func (o *Goal) SetQueued(v bool) {
	o.Queued = &v
}

// GetPanic returns the Panic field value if set, zero value otherwise.
func (o *Goal) GetPanic() int32 {
	if o == nil || o.Panic == nil {
		var ret int32
		return ret
	}
	return *o.Panic
}

// GetPanicOk returns a tuple with the Panic field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Goal) GetPanicOk() (*int32, bool) {
	if o == nil || o.Panic == nil {
		return nil, false
	}
	return o.Panic, true
}

// HasPanic returns a boolean if a field has been set.
func (o *Goal) HasPanic() bool {
	if o != nil && o.Panic != nil {
		return true
	}

	return false
}

// SetPanic gets a reference to the given int32 and assigns it to the Panic field.
func (o *Goal) SetPanic(v int32) {
	o.Panic = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *Goal) GetUpdatedAt() int32 {
	if o == nil || o.UpdatedAt == nil {
		var ret int32
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Goal) GetUpdatedAtOk() (*int32, bool) {
	if o == nil || o.UpdatedAt == nil {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *Goal) HasUpdatedAt() bool {
	if o != nil && o.UpdatedAt != nil {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given int32 and assigns it to the UpdatedAt field.
func (o *Goal) SetUpdatedAt(v int32) {
	o.UpdatedAt = &v
}

// GetBurner returns the Burner field value if set, zero value otherwise.
// Deprecated
func (o *Goal) GetBurner() string {
	if o == nil || o.Burner == nil {
		var ret string
		return ret
	}
	return *o.Burner
}

// GetBurnerOk returns a tuple with the Burner field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *Goal) GetBurnerOk() (*string, bool) {
	if o == nil || o.Burner == nil {
		return nil, false
	}
	return o.Burner, true
}

// HasBurner returns a boolean if a field has been set.
func (o *Goal) HasBurner() bool {
	if o != nil && o.Burner != nil {
		return true
	}

	return false
}

// SetBurner gets a reference to the given string and assigns it to the Burner field.
// Deprecated
func (o *Goal) SetBurner(v string) {
	o.Burner = &v
}

// GetYaw returns the Yaw field value if set, zero value otherwise.
func (o *Goal) GetYaw() int32 {
	if o == nil || o.Yaw == nil {
		var ret int32
		return ret
	}
	return *o.Yaw
}

// GetYawOk returns a tuple with the Yaw field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Goal) GetYawOk() (*int32, bool) {
	if o == nil || o.Yaw == nil {
		return nil, false
	}
	return o.Yaw, true
}

// HasYaw returns a boolean if a field has been set.
func (o *Goal) HasYaw() bool {
	if o != nil && o.Yaw != nil {
		return true
	}

	return false
}

// SetYaw gets a reference to the given int32 and assigns it to the Yaw field.
func (o *Goal) SetYaw(v int32) {
	o.Yaw = &v
}

// GetLane returns the Lane field value if set, zero value otherwise.
// Deprecated
func (o *Goal) GetLane() int32 {
	if o == nil || o.Lane == nil {
		var ret int32
		return ret
	}
	return *o.Lane
}

// GetLaneOk returns a tuple with the Lane field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *Goal) GetLaneOk() (*int32, bool) {
	if o == nil || o.Lane == nil {
		return nil, false
	}
	return o.Lane, true
}

// HasLane returns a boolean if a field has been set.
func (o *Goal) HasLane() bool {
	if o != nil && o.Lane != nil {
		return true
	}

	return false
}

// SetLane gets a reference to the given int32 and assigns it to the Lane field.
// Deprecated
func (o *Goal) SetLane(v int32) {
	o.Lane = &v
}

// GetLanewidth returns the Lanewidth field value if set, zero value otherwise.
// Deprecated
func (o *Goal) GetLanewidth() float32 {
	if o == nil || o.Lanewidth == nil {
		var ret float32
		return ret
	}
	return *o.Lanewidth
}

// GetLanewidthOk returns a tuple with the Lanewidth field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *Goal) GetLanewidthOk() (*float32, bool) {
	if o == nil || o.Lanewidth == nil {
		return nil, false
	}
	return o.Lanewidth, true
}

// HasLanewidth returns a boolean if a field has been set.
func (o *Goal) HasLanewidth() bool {
	if o != nil && o.Lanewidth != nil {
		return true
	}

	return false
}

// SetLanewidth gets a reference to the given float32 and assigns it to the Lanewidth field.
// Deprecated
func (o *Goal) SetLanewidth(v float32) {
	o.Lanewidth = &v
}

// GetDelta returns the Delta field value if set, zero value otherwise.
func (o *Goal) GetDelta() float32 {
	if o == nil || o.Delta == nil {
		var ret float32
		return ret
	}
	return *o.Delta
}

// GetDeltaOk returns a tuple with the Delta field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Goal) GetDeltaOk() (*float32, bool) {
	if o == nil || o.Delta == nil {
		return nil, false
	}
	return o.Delta, true
}

// HasDelta returns a boolean if a field has been set.
func (o *Goal) HasDelta() bool {
	if o != nil && o.Delta != nil {
		return true
	}

	return false
}

// SetDelta gets a reference to the given float32 and assigns it to the Delta field.
func (o *Goal) SetDelta(v float32) {
	o.Delta = &v
}

// GetRunits returns the Runits field value if set, zero value otherwise.
func (o *Goal) GetRunits() string {
	if o == nil || o.Runits == nil {
		var ret string
		return ret
	}
	return *o.Runits
}

// GetRunitsOk returns a tuple with the Runits field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Goal) GetRunitsOk() (*string, bool) {
	if o == nil || o.Runits == nil {
		return nil, false
	}
	return o.Runits, true
}

// HasRunits returns a boolean if a field has been set.
func (o *Goal) HasRunits() bool {
	if o != nil && o.Runits != nil {
		return true
	}

	return false
}

// SetRunits gets a reference to the given string and assigns it to the Runits field.
func (o *Goal) SetRunits(v string) {
	o.Runits = &v
}

// GetLimsum returns the Limsum field value if set, zero value otherwise.
func (o *Goal) GetLimsum() string {
	if o == nil || o.Limsum == nil {
		var ret string
		return ret
	}
	return *o.Limsum
}

// GetLimsumOk returns a tuple with the Limsum field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Goal) GetLimsumOk() (*string, bool) {
	if o == nil || o.Limsum == nil {
		return nil, false
	}
	return o.Limsum, true
}

// HasLimsum returns a boolean if a field has been set.
func (o *Goal) HasLimsum() bool {
	if o != nil && o.Limsum != nil {
		return true
	}

	return false
}

// SetLimsum gets a reference to the given string and assigns it to the Limsum field.
func (o *Goal) SetLimsum(v string) {
	o.Limsum = &v
}

// GetFrozen returns the Frozen field value if set, zero value otherwise.
func (o *Goal) GetFrozen() bool {
	if o == nil || o.Frozen == nil {
		var ret bool
		return ret
	}
	return *o.Frozen
}

// GetFrozenOk returns a tuple with the Frozen field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Goal) GetFrozenOk() (*bool, bool) {
	if o == nil || o.Frozen == nil {
		return nil, false
	}
	return o.Frozen, true
}

// HasFrozen returns a boolean if a field has been set.
func (o *Goal) HasFrozen() bool {
	if o != nil && o.Frozen != nil {
		return true
	}

	return false
}

// SetFrozen gets a reference to the given bool and assigns it to the Frozen field.
func (o *Goal) SetFrozen(v bool) {
	o.Frozen = &v
}

// GetLost returns the Lost field value if set, zero value otherwise.
func (o *Goal) GetLost() bool {
	if o == nil || o.Lost == nil {
		var ret bool
		return ret
	}
	return *o.Lost
}

// GetLostOk returns a tuple with the Lost field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Goal) GetLostOk() (*bool, bool) {
	if o == nil || o.Lost == nil {
		return nil, false
	}
	return o.Lost, true
}

// HasLost returns a boolean if a field has been set.
func (o *Goal) HasLost() bool {
	if o != nil && o.Lost != nil {
		return true
	}

	return false
}

// SetLost gets a reference to the given bool and assigns it to the Lost field.
func (o *Goal) SetLost(v bool) {
	o.Lost = &v
}

// GetWon returns the Won field value if set, zero value otherwise.
func (o *Goal) GetWon() bool {
	if o == nil || o.Won == nil {
		var ret bool
		return ret
	}
	return *o.Won
}

// GetWonOk returns a tuple with the Won field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Goal) GetWonOk() (*bool, bool) {
	if o == nil || o.Won == nil {
		return nil, false
	}
	return o.Won, true
}

// HasWon returns a boolean if a field has been set.
func (o *Goal) HasWon() bool {
	if o != nil && o.Won != nil {
		return true
	}

	return false
}

// SetWon gets a reference to the given bool and assigns it to the Won field.
func (o *Goal) SetWon(v bool) {
	o.Won = &v
}

// GetContract returns the Contract field value if set, zero value otherwise.
func (o *Goal) GetContract() GoalContract {
	if o == nil || o.Contract == nil {
		var ret GoalContract
		return ret
	}
	return *o.Contract
}

// GetContractOk returns a tuple with the Contract field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Goal) GetContractOk() (*GoalContract, bool) {
	if o == nil || o.Contract == nil {
		return nil, false
	}
	return o.Contract, true
}

// HasContract returns a boolean if a field has been set.
func (o *Goal) HasContract() bool {
	if o != nil && o.Contract != nil {
		return true
	}

	return false
}

// SetContract gets a reference to the given GoalContract and assigns it to the Contract field.
func (o *Goal) SetContract(v GoalContract) {
	o.Contract = &v
}

// GetDeltaText returns the DeltaText field value if set, zero value otherwise.
// Deprecated
func (o *Goal) GetDeltaText() string {
	if o == nil || o.DeltaText == nil {
		var ret string
		return ret
	}
	return *o.DeltaText
}

// GetDeltaTextOk returns a tuple with the DeltaText field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *Goal) GetDeltaTextOk() (*string, bool) {
	if o == nil || o.DeltaText == nil {
		return nil, false
	}
	return o.DeltaText, true
}

// HasDeltaText returns a boolean if a field has been set.
func (o *Goal) HasDeltaText() bool {
	if o != nil && o.DeltaText != nil {
		return true
	}

	return false
}

// SetDeltaText gets a reference to the given string and assigns it to the DeltaText field.
// Deprecated
func (o *Goal) SetDeltaText(v string) {
	o.DeltaText = &v
}

// GetSafebump returns the Safebump field value if set, zero value otherwise.
func (o *Goal) GetSafebump() float32 {
	if o == nil || o.Safebump == nil {
		var ret float32
		return ret
	}
	return *o.Safebump
}

// GetSafebumpOk returns a tuple with the Safebump field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Goal) GetSafebumpOk() (*float32, bool) {
	if o == nil || o.Safebump == nil {
		return nil, false
	}
	return o.Safebump, true
}

// HasSafebump returns a boolean if a field has been set.
func (o *Goal) HasSafebump() bool {
	if o != nil && o.Safebump != nil {
		return true
	}

	return false
}

// SetSafebump gets a reference to the given float32 and assigns it to the Safebump field.
func (o *Goal) SetSafebump(v float32) {
	o.Safebump = &v
}

// GetSafesum returns the Safesum field value if set, zero value otherwise.
func (o *Goal) GetSafesum() string {
	if o == nil || o.Safesum == nil {
		var ret string
		return ret
	}
	return *o.Safesum
}

// GetSafesumOk returns a tuple with the Safesum field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Goal) GetSafesumOk() (*string, bool) {
	if o == nil || o.Safesum == nil {
		return nil, false
	}
	return o.Safesum, true
}

// HasSafesum returns a boolean if a field has been set.
func (o *Goal) HasSafesum() bool {
	if o != nil && o.Safesum != nil {
		return true
	}

	return false
}

// SetSafesum gets a reference to the given string and assigns it to the Safesum field.
func (o *Goal) SetSafesum(v string) {
	o.Safesum = &v
}

// GetLimsumdate returns the Limsumdate field value if set, zero value otherwise.
func (o *Goal) GetLimsumdate() string {
	if o == nil || o.Limsumdate == nil {
		var ret string
		return ret
	}
	return *o.Limsumdate
}

// GetLimsumdateOk returns a tuple with the Limsumdate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Goal) GetLimsumdateOk() (*string, bool) {
	if o == nil || o.Limsumdate == nil {
		return nil, false
	}
	return o.Limsumdate, true
}

// HasLimsumdate returns a boolean if a field has been set.
func (o *Goal) HasLimsumdate() bool {
	if o != nil && o.Limsumdate != nil {
		return true
	}

	return false
}

// SetLimsumdate gets a reference to the given string and assigns it to the Limsumdate field.
func (o *Goal) SetLimsumdate(v string) {
	o.Limsumdate = &v
}

// GetLimsumdays returns the Limsumdays field value if set, zero value otherwise.
func (o *Goal) GetLimsumdays() string {
	if o == nil || o.Limsumdays == nil {
		var ret string
		return ret
	}
	return *o.Limsumdays
}

// GetLimsumdaysOk returns a tuple with the Limsumdays field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Goal) GetLimsumdaysOk() (*string, bool) {
	if o == nil || o.Limsumdays == nil {
		return nil, false
	}
	return o.Limsumdays, true
}

// HasLimsumdays returns a boolean if a field has been set.
func (o *Goal) HasLimsumdays() bool {
	if o != nil && o.Limsumdays != nil {
		return true
	}

	return false
}

// SetLimsumdays gets a reference to the given string and assigns it to the Limsumdays field.
func (o *Goal) SetLimsumdays(v string) {
	o.Limsumdays = &v
}

// GetBaremin returns the Baremin field value if set, zero value otherwise.
func (o *Goal) GetBaremin() string {
	if o == nil || o.Baremin == nil {
		var ret string
		return ret
	}
	return *o.Baremin
}

// GetBareminOk returns a tuple with the Baremin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Goal) GetBareminOk() (*string, bool) {
	if o == nil || o.Baremin == nil {
		return nil, false
	}
	return o.Baremin, true
}

// HasBaremin returns a boolean if a field has been set.
func (o *Goal) HasBaremin() bool {
	if o != nil && o.Baremin != nil {
		return true
	}

	return false
}

// SetBaremin gets a reference to the given string and assigns it to the Baremin field.
func (o *Goal) SetBaremin(v string) {
	o.Baremin = &v
}

// GetBaremintotal returns the Baremintotal field value if set, zero value otherwise.
func (o *Goal) GetBaremintotal() string {
	if o == nil || o.Baremintotal == nil {
		var ret string
		return ret
	}
	return *o.Baremintotal
}

// GetBaremintotalOk returns a tuple with the Baremintotal field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Goal) GetBaremintotalOk() (*string, bool) {
	if o == nil || o.Baremintotal == nil {
		return nil, false
	}
	return o.Baremintotal, true
}

// HasBaremintotal returns a boolean if a field has been set.
func (o *Goal) HasBaremintotal() bool {
	if o != nil && o.Baremintotal != nil {
		return true
	}

	return false
}

// SetBaremintotal gets a reference to the given string and assigns it to the Baremintotal field.
func (o *Goal) SetBaremintotal(v string) {
	o.Baremintotal = &v
}

// GetRoadstatuscolor returns the Roadstatuscolor field value if set, zero value otherwise.
func (o *Goal) GetRoadstatuscolor() string {
	if o == nil || o.Roadstatuscolor == nil {
		var ret string
		return ret
	}
	return *o.Roadstatuscolor
}

// GetRoadstatuscolorOk returns a tuple with the Roadstatuscolor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Goal) GetRoadstatuscolorOk() (*string, bool) {
	if o == nil || o.Roadstatuscolor == nil {
		return nil, false
	}
	return o.Roadstatuscolor, true
}

// HasRoadstatuscolor returns a boolean if a field has been set.
func (o *Goal) HasRoadstatuscolor() bool {
	if o != nil && o.Roadstatuscolor != nil {
		return true
	}

	return false
}

// SetRoadstatuscolor gets a reference to the given string and assigns it to the Roadstatuscolor field.
func (o *Goal) SetRoadstatuscolor(v string) {
	o.Roadstatuscolor = &v
}

// GetLasttouch returns the Lasttouch field value if set, zero value otherwise.
func (o *Goal) GetLasttouch() string {
	if o == nil || o.Lasttouch == nil {
		var ret string
		return ret
	}
	return *o.Lasttouch
}

// GetLasttouchOk returns a tuple with the Lasttouch field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Goal) GetLasttouchOk() (*string, bool) {
	if o == nil || o.Lasttouch == nil {
		return nil, false
	}
	return o.Lasttouch, true
}

// HasLasttouch returns a boolean if a field has been set.
func (o *Goal) HasLasttouch() bool {
	if o != nil && o.Lasttouch != nil {
		return true
	}

	return false
}

// SetLasttouch gets a reference to the given string and assigns it to the Lasttouch field.
func (o *Goal) SetLasttouch(v string) {
	o.Lasttouch = &v
}

// GetSafebuf returns the Safebuf field value if set, zero value otherwise.
func (o *Goal) GetSafebuf() float32 {
	if o == nil || o.Safebuf == nil {
		var ret float32
		return ret
	}
	return *o.Safebuf
}

// GetSafebufOk returns a tuple with the Safebuf field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Goal) GetSafebufOk() (*float32, bool) {
	if o == nil || o.Safebuf == nil {
		return nil, false
	}
	return o.Safebuf, true
}

// HasSafebuf returns a boolean if a field has been set.
func (o *Goal) HasSafebuf() bool {
	if o != nil && o.Safebuf != nil {
		return true
	}

	return false
}

// SetSafebuf gets a reference to the given float32 and assigns it to the Safebuf field.
func (o *Goal) SetSafebuf(v float32) {
	o.Safebuf = &v
}

// GetCoasting returns the Coasting field value if set, zero value otherwise.
func (o *Goal) GetCoasting() bool {
	if o == nil || o.Coasting == nil {
		var ret bool
		return ret
	}
	return *o.Coasting
}

// GetCoastingOk returns a tuple with the Coasting field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Goal) GetCoastingOk() (*bool, bool) {
	if o == nil || o.Coasting == nil {
		return nil, false
	}
	return o.Coasting, true
}

// HasCoasting returns a boolean if a field has been set.
func (o *Goal) HasCoasting() bool {
	if o != nil && o.Coasting != nil {
		return true
	}

	return false
}

// SetCoasting gets a reference to the given bool and assigns it to the Coasting field.
func (o *Goal) SetCoasting(v bool) {
	o.Coasting = &v
}

// GetIntegery returns the Integery field value if set, zero value otherwise.
func (o *Goal) GetIntegery() bool {
	if o == nil || o.Integery == nil {
		var ret bool
		return ret
	}
	return *o.Integery
}

// GetIntegeryOk returns a tuple with the Integery field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Goal) GetIntegeryOk() (*bool, bool) {
	if o == nil || o.Integery == nil {
		return nil, false
	}
	return o.Integery, true
}

// HasIntegery returns a boolean if a field has been set.
func (o *Goal) HasIntegery() bool {
	if o != nil && o.Integery != nil {
		return true
	}

	return false
}

// SetIntegery gets a reference to the given bool and assigns it to the Integery field.
func (o *Goal) SetIntegery(v bool) {
	o.Integery = &v
}

// GetFineprint returns the Fineprint field value if set, zero value otherwise.
func (o *Goal) GetFineprint() string {
	if o == nil || o.Fineprint == nil {
		var ret string
		return ret
	}
	return *o.Fineprint
}

// GetFineprintOk returns a tuple with the Fineprint field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Goal) GetFineprintOk() (*string, bool) {
	if o == nil || o.Fineprint == nil {
		return nil, false
	}
	return o.Fineprint, true
}

// HasFineprint returns a boolean if a field has been set.
func (o *Goal) HasFineprint() bool {
	if o != nil && o.Fineprint != nil {
		return true
	}

	return false
}

// SetFineprint gets a reference to the given string and assigns it to the Fineprint field.
func (o *Goal) SetFineprint(v string) {
	o.Fineprint = &v
}

// GetTodayta returns the Todayta field value if set, zero value otherwise.
func (o *Goal) GetTodayta() bool {
	if o == nil || o.Todayta == nil {
		var ret bool
		return ret
	}
	return *o.Todayta
}

// GetTodaytaOk returns a tuple with the Todayta field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Goal) GetTodaytaOk() (*bool, bool) {
	if o == nil || o.Todayta == nil {
		return nil, false
	}
	return o.Todayta, true
}

// HasTodayta returns a boolean if a field has been set.
func (o *Goal) HasTodayta() bool {
	if o != nil && o.Todayta != nil {
		return true
	}

	return false
}

// SetTodayta gets a reference to the given bool and assigns it to the Todayta field.
func (o *Goal) SetTodayta(v bool) {
	o.Todayta = &v
}

// GetHhmmformat returns the Hhmmformat field value if set, zero value otherwise.
func (o *Goal) GetHhmmformat() bool {
	if o == nil || o.Hhmmformat == nil {
		var ret bool
		return ret
	}
	return *o.Hhmmformat
}

// GetHhmmformatOk returns a tuple with the Hhmmformat field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Goal) GetHhmmformatOk() (*bool, bool) {
	if o == nil || o.Hhmmformat == nil {
		return nil, false
	}
	return o.Hhmmformat, true
}

// HasHhmmformat returns a boolean if a field has been set.
func (o *Goal) HasHhmmformat() bool {
	if o != nil && o.Hhmmformat != nil {
		return true
	}

	return false
}

// SetHhmmformat gets a reference to the given bool and assigns it to the Hhmmformat field.
func (o *Goal) SetHhmmformat(v bool) {
	o.Hhmmformat = &v
}

// GetGunits returns the Gunits field value if set, zero value otherwise.
func (o *Goal) GetGunits() string {
	if o == nil || o.Gunits == nil {
		var ret string
		return ret
	}
	return *o.Gunits
}

// GetGunitsOk returns a tuple with the Gunits field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Goal) GetGunitsOk() (*string, bool) {
	if o == nil || o.Gunits == nil {
		return nil, false
	}
	return o.Gunits, true
}

// HasGunits returns a boolean if a field has been set.
func (o *Goal) HasGunits() bool {
	if o != nil && o.Gunits != nil {
		return true
	}

	return false
}

// SetGunits gets a reference to the given string and assigns it to the Gunits field.
func (o *Goal) SetGunits(v string) {
	o.Gunits = &v
}

// GetWeekendsOff returns the WeekendsOff field value if set, zero value otherwise.
func (o *Goal) GetWeekendsOff() bool {
	if o == nil || o.WeekendsOff == nil {
		var ret bool
		return ret
	}
	return *o.WeekendsOff
}

// GetWeekendsOffOk returns a tuple with the WeekendsOff field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Goal) GetWeekendsOffOk() (*bool, bool) {
	if o == nil || o.WeekendsOff == nil {
		return nil, false
	}
	return o.WeekendsOff, true
}

// HasWeekendsOff returns a boolean if a field has been set.
func (o *Goal) HasWeekendsOff() bool {
	if o != nil && o.WeekendsOff != nil {
		return true
	}

	return false
}

// SetWeekendsOff gets a reference to the given bool and assigns it to the WeekendsOff field.
func (o *Goal) SetWeekendsOff(v bool) {
	o.WeekendsOff = &v
}

// GetYaxis returns the Yaxis field value if set, zero value otherwise.
func (o *Goal) GetYaxis() string {
	if o == nil || o.Yaxis == nil {
		var ret string
		return ret
	}
	return *o.Yaxis
}

// GetYaxisOk returns a tuple with the Yaxis field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Goal) GetYaxisOk() (*string, bool) {
	if o == nil || o.Yaxis == nil {
		return nil, false
	}
	return o.Yaxis, true
}

// HasYaxis returns a boolean if a field has been set.
func (o *Goal) HasYaxis() bool {
	if o != nil && o.Yaxis != nil {
		return true
	}

	return false
}

// SetYaxis gets a reference to the given string and assigns it to the Yaxis field.
func (o *Goal) SetYaxis(v string) {
	o.Yaxis = &v
}

// GetMaxflux returns the Maxflux field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Goal) GetMaxflux() float32 {
	if o == nil || o.Maxflux.Get() == nil {
		var ret float32
		return ret
	}
	return *o.Maxflux.Get()
}

// GetMaxfluxOk returns a tuple with the Maxflux field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Goal) GetMaxfluxOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Maxflux.Get(), o.Maxflux.IsSet()
}

// HasMaxflux returns a boolean if a field has been set.
func (o *Goal) HasMaxflux() bool {
	if o != nil && o.Maxflux.IsSet() {
		return true
	}

	return false
}

// SetMaxflux gets a reference to the given NullableFloat32 and assigns it to the Maxflux field.
func (o *Goal) SetMaxflux(v float32) {
	o.Maxflux.Set(&v)
}
// SetMaxfluxNil sets the value for Maxflux to be an explicit nil
func (o *Goal) SetMaxfluxNil() {
	o.Maxflux.Set(nil)
}

// UnsetMaxflux ensures that no value is present for Maxflux, not even an explicit nil
func (o *Goal) UnsetMaxflux() {
	o.Maxflux.Unset()
}

// GetTmin returns the Tmin field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Goal) GetTmin() string {
	if o == nil || o.Tmin.Get() == nil {
		var ret string
		return ret
	}
	return *o.Tmin.Get()
}

// GetTminOk returns a tuple with the Tmin field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Goal) GetTminOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Tmin.Get(), o.Tmin.IsSet()
}

// HasTmin returns a boolean if a field has been set.
func (o *Goal) HasTmin() bool {
	if o != nil && o.Tmin.IsSet() {
		return true
	}

	return false
}

// SetTmin gets a reference to the given NullableString and assigns it to the Tmin field.
func (o *Goal) SetTmin(v string) {
	o.Tmin.Set(&v)
}
// SetTminNil sets the value for Tmin to be an explicit nil
func (o *Goal) SetTminNil() {
	o.Tmin.Set(nil)
}

// UnsetTmin ensures that no value is present for Tmin, not even an explicit nil
func (o *Goal) UnsetTmin() {
	o.Tmin.Unset()
}

// GetTmax returns the Tmax field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Goal) GetTmax() string {
	if o == nil || o.Tmax.Get() == nil {
		var ret string
		return ret
	}
	return *o.Tmax.Get()
}

// GetTmaxOk returns a tuple with the Tmax field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Goal) GetTmaxOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Tmax.Get(), o.Tmax.IsSet()
}

// HasTmax returns a boolean if a field has been set.
func (o *Goal) HasTmax() bool {
	if o != nil && o.Tmax.IsSet() {
		return true
	}

	return false
}

// SetTmax gets a reference to the given NullableString and assigns it to the Tmax field.
func (o *Goal) SetTmax(v string) {
	o.Tmax.Set(&v)
}
// SetTmaxNil sets the value for Tmax to be an explicit nil
func (o *Goal) SetTmaxNil() {
	o.Tmax.Set(nil)
}

// UnsetTmax ensures that no value is present for Tmax, not even an explicit nil
func (o *Goal) UnsetTmax() {
	o.Tmax.Unset()
}

// GetInitday returns the Initday field value if set, zero value otherwise.
func (o *Goal) GetInitday() int32 {
	if o == nil || o.Initday == nil {
		var ret int32
		return ret
	}
	return *o.Initday
}

// GetInitdayOk returns a tuple with the Initday field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Goal) GetInitdayOk() (*int32, bool) {
	if o == nil || o.Initday == nil {
		return nil, false
	}
	return o.Initday, true
}

// HasInitday returns a boolean if a field has been set.
func (o *Goal) HasInitday() bool {
	if o != nil && o.Initday != nil {
		return true
	}

	return false
}

// SetInitday gets a reference to the given int32 and assigns it to the Initday field.
func (o *Goal) SetInitday(v int32) {
	o.Initday = &v
}

// GetInitval returns the Initval field value if set, zero value otherwise.
func (o *Goal) GetInitval() float32 {
	if o == nil || o.Initval == nil {
		var ret float32
		return ret
	}
	return *o.Initval
}

// GetInitvalOk returns a tuple with the Initval field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Goal) GetInitvalOk() (*float32, bool) {
	if o == nil || o.Initval == nil {
		return nil, false
	}
	return o.Initval, true
}

// HasInitval returns a boolean if a field has been set.
func (o *Goal) HasInitval() bool {
	if o != nil && o.Initval != nil {
		return true
	}

	return false
}

// SetInitval gets a reference to the given float32 and assigns it to the Initval field.
func (o *Goal) SetInitval(v float32) {
	o.Initval = &v
}

// GetCurday returns the Curday field value if set, zero value otherwise.
func (o *Goal) GetCurday() float32 {
	if o == nil || o.Curday == nil {
		var ret float32
		return ret
	}
	return *o.Curday
}

// GetCurdayOk returns a tuple with the Curday field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Goal) GetCurdayOk() (*float32, bool) {
	if o == nil || o.Curday == nil {
		return nil, false
	}
	return o.Curday, true
}

// HasCurday returns a boolean if a field has been set.
func (o *Goal) HasCurday() bool {
	if o != nil && o.Curday != nil {
		return true
	}

	return false
}

// SetCurday gets a reference to the given float32 and assigns it to the Curday field.
func (o *Goal) SetCurday(v float32) {
	o.Curday = &v
}

// GetCurval returns the Curval field value if set, zero value otherwise.
func (o *Goal) GetCurval() float32 {
	if o == nil || o.Curval == nil {
		var ret float32
		return ret
	}
	return *o.Curval
}

// GetCurvalOk returns a tuple with the Curval field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Goal) GetCurvalOk() (*float32, bool) {
	if o == nil || o.Curval == nil {
		return nil, false
	}
	return o.Curval, true
}

// HasCurval returns a boolean if a field has been set.
func (o *Goal) HasCurval() bool {
	if o != nil && o.Curval != nil {
		return true
	}

	return false
}

// SetCurval gets a reference to the given float32 and assigns it to the Curval field.
func (o *Goal) SetCurval(v float32) {
	o.Curval = &v
}

// GetLastday returns the Lastday field value if set, zero value otherwise.
func (o *Goal) GetLastday() float32 {
	if o == nil || o.Lastday == nil {
		var ret float32
		return ret
	}
	return *o.Lastday
}

// GetLastdayOk returns a tuple with the Lastday field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Goal) GetLastdayOk() (*float32, bool) {
	if o == nil || o.Lastday == nil {
		return nil, false
	}
	return o.Lastday, true
}

// HasLastday returns a boolean if a field has been set.
func (o *Goal) HasLastday() bool {
	if o != nil && o.Lastday != nil {
		return true
	}

	return false
}

// SetLastday gets a reference to the given float32 and assigns it to the Lastday field.
func (o *Goal) SetLastday(v float32) {
	o.Lastday = &v
}

// GetDir returns the Dir field value if set, zero value otherwise.
func (o *Goal) GetDir() float32 {
	if o == nil || o.Dir == nil {
		var ret float32
		return ret
	}
	return *o.Dir
}

// GetDirOk returns a tuple with the Dir field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Goal) GetDirOk() (*float32, bool) {
	if o == nil || o.Dir == nil {
		return nil, false
	}
	return o.Dir, true
}

// HasDir returns a boolean if a field has been set.
func (o *Goal) HasDir() bool {
	if o != nil && o.Dir != nil {
		return true
	}

	return false
}

// SetDir gets a reference to the given float32 and assigns it to the Dir field.
func (o *Goal) SetDir(v float32) {
	o.Dir = &v
}

// GetKyoom returns the Kyoom field value if set, zero value otherwise.
func (o *Goal) GetKyoom() bool {
	if o == nil || o.Kyoom == nil {
		var ret bool
		return ret
	}
	return *o.Kyoom
}

// GetKyoomOk returns a tuple with the Kyoom field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Goal) GetKyoomOk() (*bool, bool) {
	if o == nil || o.Kyoom == nil {
		return nil, false
	}
	return o.Kyoom, true
}

// HasKyoom returns a boolean if a field has been set.
func (o *Goal) HasKyoom() bool {
	if o != nil && o.Kyoom != nil {
		return true
	}

	return false
}

// SetKyoom gets a reference to the given bool and assigns it to the Kyoom field.
func (o *Goal) SetKyoom(v bool) {
	o.Kyoom = &v
}

// GetOdom returns the Odom field value if set, zero value otherwise.
func (o *Goal) GetOdom() bool {
	if o == nil || o.Odom == nil {
		var ret bool
		return ret
	}
	return *o.Odom
}

// GetOdomOk returns a tuple with the Odom field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Goal) GetOdomOk() (*bool, bool) {
	if o == nil || o.Odom == nil {
		return nil, false
	}
	return o.Odom, true
}

// HasOdom returns a boolean if a field has been set.
func (o *Goal) HasOdom() bool {
	if o != nil && o.Odom != nil {
		return true
	}

	return false
}

// SetOdom gets a reference to the given bool and assigns it to the Odom field.
func (o *Goal) SetOdom(v bool) {
	o.Odom = &v
}

// GetNoisy returns the Noisy field value if set, zero value otherwise.
func (o *Goal) GetNoisy() bool {
	if o == nil || o.Noisy == nil {
		var ret bool
		return ret
	}
	return *o.Noisy
}

// GetNoisyOk returns a tuple with the Noisy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Goal) GetNoisyOk() (*bool, bool) {
	if o == nil || o.Noisy == nil {
		return nil, false
	}
	return o.Noisy, true
}

// HasNoisy returns a boolean if a field has been set.
func (o *Goal) HasNoisy() bool {
	if o != nil && o.Noisy != nil {
		return true
	}

	return false
}

// SetNoisy gets a reference to the given bool and assigns it to the Noisy field.
func (o *Goal) SetNoisy(v bool) {
	o.Noisy = &v
}

// GetAggday returns the Aggday field value if set, zero value otherwise.
func (o *Goal) GetAggday() string {
	if o == nil || o.Aggday == nil {
		var ret string
		return ret
	}
	return *o.Aggday
}

// GetAggdayOk returns a tuple with the Aggday field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Goal) GetAggdayOk() (*string, bool) {
	if o == nil || o.Aggday == nil {
		return nil, false
	}
	return o.Aggday, true
}

// HasAggday returns a boolean if a field has been set.
func (o *Goal) HasAggday() bool {
	if o != nil && o.Aggday != nil {
		return true
	}

	return false
}

// SetAggday gets a reference to the given string and assigns it to the Aggday field.
func (o *Goal) SetAggday(v string) {
	o.Aggday = &v
}

// GetPlotall returns the Plotall field value if set, zero value otherwise.
func (o *Goal) GetPlotall() bool {
	if o == nil || o.Plotall == nil {
		var ret bool
		return ret
	}
	return *o.Plotall
}

// GetPlotallOk returns a tuple with the Plotall field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Goal) GetPlotallOk() (*bool, bool) {
	if o == nil || o.Plotall == nil {
		return nil, false
	}
	return o.Plotall, true
}

// HasPlotall returns a boolean if a field has been set.
func (o *Goal) HasPlotall() bool {
	if o != nil && o.Plotall != nil {
		return true
	}

	return false
}

// SetPlotall gets a reference to the given bool and assigns it to the Plotall field.
func (o *Goal) SetPlotall(v bool) {
	o.Plotall = &v
}

// GetSteppy returns the Steppy field value if set, zero value otherwise.
func (o *Goal) GetSteppy() bool {
	if o == nil || o.Steppy == nil {
		var ret bool
		return ret
	}
	return *o.Steppy
}

// GetSteppyOk returns a tuple with the Steppy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Goal) GetSteppyOk() (*bool, bool) {
	if o == nil || o.Steppy == nil {
		return nil, false
	}
	return o.Steppy, true
}

// HasSteppy returns a boolean if a field has been set.
func (o *Goal) HasSteppy() bool {
	if o != nil && o.Steppy != nil {
		return true
	}

	return false
}

// SetSteppy gets a reference to the given bool and assigns it to the Steppy field.
func (o *Goal) SetSteppy(v bool) {
	o.Steppy = &v
}

// GetRosy returns the Rosy field value if set, zero value otherwise.
func (o *Goal) GetRosy() bool {
	if o == nil || o.Rosy == nil {
		var ret bool
		return ret
	}
	return *o.Rosy
}

// GetRosyOk returns a tuple with the Rosy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Goal) GetRosyOk() (*bool, bool) {
	if o == nil || o.Rosy == nil {
		return nil, false
	}
	return o.Rosy, true
}

// HasRosy returns a boolean if a field has been set.
func (o *Goal) HasRosy() bool {
	if o != nil && o.Rosy != nil {
		return true
	}

	return false
}

// SetRosy gets a reference to the given bool and assigns it to the Rosy field.
func (o *Goal) SetRosy(v bool) {
	o.Rosy = &v
}

// GetMovingav returns the Movingav field value if set, zero value otherwise.
func (o *Goal) GetMovingav() bool {
	if o == nil || o.Movingav == nil {
		var ret bool
		return ret
	}
	return *o.Movingav
}

// GetMovingavOk returns a tuple with the Movingav field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Goal) GetMovingavOk() (*bool, bool) {
	if o == nil || o.Movingav == nil {
		return nil, false
	}
	return o.Movingav, true
}

// HasMovingav returns a boolean if a field has been set.
func (o *Goal) HasMovingav() bool {
	if o != nil && o.Movingav != nil {
		return true
	}

	return false
}

// SetMovingav gets a reference to the given bool and assigns it to the Movingav field.
func (o *Goal) SetMovingav(v bool) {
	o.Movingav = &v
}

// GetAura returns the Aura field value if set, zero value otherwise.
func (o *Goal) GetAura() bool {
	if o == nil || o.Aura == nil {
		var ret bool
		return ret
	}
	return *o.Aura
}

// GetAuraOk returns a tuple with the Aura field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Goal) GetAuraOk() (*bool, bool) {
	if o == nil || o.Aura == nil {
		return nil, false
	}
	return o.Aura, true
}

// HasAura returns a boolean if a field has been set.
func (o *Goal) HasAura() bool {
	if o != nil && o.Aura != nil {
		return true
	}

	return false
}

// SetAura gets a reference to the given bool and assigns it to the Aura field.
func (o *Goal) SetAura(v bool) {
	o.Aura = &v
}

// GetNumpts returns the Numpts field value if set, zero value otherwise.
func (o *Goal) GetNumpts() float32 {
	if o == nil || o.Numpts == nil {
		var ret float32
		return ret
	}
	return *o.Numpts
}

// GetNumptsOk returns a tuple with the Numpts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Goal) GetNumptsOk() (*float32, bool) {
	if o == nil || o.Numpts == nil {
		return nil, false
	}
	return o.Numpts, true
}

// HasNumpts returns a boolean if a field has been set.
func (o *Goal) HasNumpts() bool {
	if o != nil && o.Numpts != nil {
		return true
	}

	return false
}

// SetNumpts gets a reference to the given float32 and assigns it to the Numpts field.
func (o *Goal) SetNumpts(v float32) {
	o.Numpts = &v
}

// GetRoad returns the Road field value if set, zero value otherwise.
func (o *Goal) GetRoad() [][]*float32 {
	if o == nil || o.Road == nil {
		var ret [][]*float32
		return ret
	}
	return o.Road
}

// GetRoadOk returns a tuple with the Road field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Goal) GetRoadOk() ([][]*float32, bool) {
	if o == nil || o.Road == nil {
		return nil, false
	}
	return o.Road, true
}

// HasRoad returns a boolean if a field has been set.
func (o *Goal) HasRoad() bool {
	if o != nil && o.Road != nil {
		return true
	}

	return false
}

// SetRoad gets a reference to the given [][]*float32 and assigns it to the Road field.
func (o *Goal) SetRoad(v [][]*float32) {
	o.Road = v
}

// GetRoadall returns the Roadall field value if set, zero value otherwise.
func (o *Goal) GetRoadall() [][]*float32 {
	if o == nil || o.Roadall == nil {
		var ret [][]*float32
		return ret
	}
	return o.Roadall
}

// GetRoadallOk returns a tuple with the Roadall field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Goal) GetRoadallOk() ([][]*float32, bool) {
	if o == nil || o.Roadall == nil {
		return nil, false
	}
	return o.Roadall, true
}

// HasRoadall returns a boolean if a field has been set.
func (o *Goal) HasRoadall() bool {
	if o != nil && o.Roadall != nil {
		return true
	}

	return false
}

// SetRoadall gets a reference to the given [][]*float32 and assigns it to the Roadall field.
func (o *Goal) SetRoadall(v [][]*float32) {
	o.Roadall = v
}

// GetFullroad returns the Fullroad field value if set, zero value otherwise.
func (o *Goal) GetFullroad() [][]float32 {
	if o == nil || o.Fullroad == nil {
		var ret [][]float32
		return ret
	}
	return o.Fullroad
}

// GetFullroadOk returns a tuple with the Fullroad field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Goal) GetFullroadOk() ([][]float32, bool) {
	if o == nil || o.Fullroad == nil {
		return nil, false
	}
	return o.Fullroad, true
}

// HasFullroad returns a boolean if a field has been set.
func (o *Goal) HasFullroad() bool {
	if o != nil && o.Fullroad != nil {
		return true
	}

	return false
}

// SetFullroad gets a reference to the given [][]float32 and assigns it to the Fullroad field.
func (o *Goal) SetFullroad(v [][]float32) {
	o.Fullroad = v
}

// GetSecret returns the Secret field value if set, zero value otherwise.
func (o *Goal) GetSecret() bool {
	if o == nil || o.Secret == nil {
		var ret bool
		return ret
	}
	return *o.Secret
}

// GetSecretOk returns a tuple with the Secret field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Goal) GetSecretOk() (*bool, bool) {
	if o == nil || o.Secret == nil {
		return nil, false
	}
	return o.Secret, true
}

// HasSecret returns a boolean if a field has been set.
func (o *Goal) HasSecret() bool {
	if o != nil && o.Secret != nil {
		return true
	}

	return false
}

// SetSecret gets a reference to the given bool and assigns it to the Secret field.
func (o *Goal) SetSecret(v bool) {
	o.Secret = &v
}

// GetPledge returns the Pledge field value if set, zero value otherwise.
func (o *Goal) GetPledge() float32 {
	if o == nil || o.Pledge == nil {
		var ret float32
		return ret
	}
	return *o.Pledge
}

// GetPledgeOk returns a tuple with the Pledge field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Goal) GetPledgeOk() (*float32, bool) {
	if o == nil || o.Pledge == nil {
		return nil, false
	}
	return o.Pledge, true
}

// HasPledge returns a boolean if a field has been set.
func (o *Goal) HasPledge() bool {
	if o != nil && o.Pledge != nil {
		return true
	}

	return false
}

// SetPledge gets a reference to the given float32 and assigns it to the Pledge field.
func (o *Goal) SetPledge(v float32) {
	o.Pledge = &v
}

// GetMathishard returns the Mathishard field value if set, zero value otherwise.
func (o *Goal) GetMathishard() []float32 {
	if o == nil || o.Mathishard == nil {
		var ret []float32
		return ret
	}
	return o.Mathishard
}

// GetMathishardOk returns a tuple with the Mathishard field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Goal) GetMathishardOk() ([]float32, bool) {
	if o == nil || o.Mathishard == nil {
		return nil, false
	}
	return o.Mathishard, true
}

// HasMathishard returns a boolean if a field has been set.
func (o *Goal) HasMathishard() bool {
	if o != nil && o.Mathishard != nil {
		return true
	}

	return false
}

// SetMathishard gets a reference to the given []float32 and assigns it to the Mathishard field.
func (o *Goal) SetMathishard(v []float32) {
	o.Mathishard = v
}

// GetHeadsum returns the Headsum field value if set, zero value otherwise.
// Deprecated
func (o *Goal) GetHeadsum() string {
	if o == nil || o.Headsum == nil {
		var ret string
		return ret
	}
	return *o.Headsum
}

// GetHeadsumOk returns a tuple with the Headsum field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *Goal) GetHeadsumOk() (*string, bool) {
	if o == nil || o.Headsum == nil {
		return nil, false
	}
	return o.Headsum, true
}

// HasHeadsum returns a boolean if a field has been set.
func (o *Goal) HasHeadsum() bool {
	if o != nil && o.Headsum != nil {
		return true
	}

	return false
}

// SetHeadsum gets a reference to the given string and assigns it to the Headsum field.
// Deprecated
func (o *Goal) SetHeadsum(v string) {
	o.Headsum = &v
}

// GetDatapublic returns the Datapublic field value if set, zero value otherwise.
func (o *Goal) GetDatapublic() bool {
	if o == nil || o.Datapublic == nil {
		var ret bool
		return ret
	}
	return *o.Datapublic
}

// GetDatapublicOk returns a tuple with the Datapublic field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Goal) GetDatapublicOk() (*bool, bool) {
	if o == nil || o.Datapublic == nil {
		return nil, false
	}
	return o.Datapublic, true
}

// HasDatapublic returns a boolean if a field has been set.
func (o *Goal) HasDatapublic() bool {
	if o != nil && o.Datapublic != nil {
		return true
	}

	return false
}

// SetDatapublic gets a reference to the given bool and assigns it to the Datapublic field.
func (o *Goal) SetDatapublic(v bool) {
	o.Datapublic = &v
}

// GetGraphsum returns the Graphsum field value if set, zero value otherwise.
// Deprecated
func (o *Goal) GetGraphsum() string {
	if o == nil || o.Graphsum == nil {
		var ret string
		return ret
	}
	return *o.Graphsum
}

// GetGraphsumOk returns a tuple with the Graphsum field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *Goal) GetGraphsumOk() (*string, bool) {
	if o == nil || o.Graphsum == nil {
		return nil, false
	}
	return o.Graphsum, true
}

// HasGraphsum returns a boolean if a field has been set.
func (o *Goal) HasGraphsum() bool {
	if o != nil && o.Graphsum != nil {
		return true
	}

	return false
}

// SetGraphsum gets a reference to the given string and assigns it to the Graphsum field.
// Deprecated
func (o *Goal) SetGraphsum(v string) {
	o.Graphsum = &v
}

// GetRah returns the Rah field value if set, zero value otherwise.
func (o *Goal) GetRah() float32 {
	if o == nil || o.Rah == nil {
		var ret float32
		return ret
	}
	return *o.Rah
}

// GetRahOk returns a tuple with the Rah field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Goal) GetRahOk() (*float32, bool) {
	if o == nil || o.Rah == nil {
		return nil, false
	}
	return o.Rah, true
}

// HasRah returns a boolean if a field has been set.
func (o *Goal) HasRah() bool {
	if o != nil && o.Rah != nil {
		return true
	}

	return false
}

// SetRah gets a reference to the given float32 and assigns it to the Rah field.
func (o *Goal) SetRah(v float32) {
	o.Rah = &v
}

// GetLastDatapoint returns the LastDatapoint field value if set, zero value otherwise.
func (o *Goal) GetLastDatapoint() Datapoint {
	if o == nil || o.LastDatapoint == nil {
		var ret Datapoint
		return ret
	}
	return *o.LastDatapoint
}

// GetLastDatapointOk returns a tuple with the LastDatapoint field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Goal) GetLastDatapointOk() (*Datapoint, bool) {
	if o == nil || o.LastDatapoint == nil {
		return nil, false
	}
	return o.LastDatapoint, true
}

// HasLastDatapoint returns a boolean if a field has been set.
func (o *Goal) HasLastDatapoint() bool {
	if o != nil && o.LastDatapoint != nil {
		return true
	}

	return false
}

// SetLastDatapoint gets a reference to the given Datapoint and assigns it to the LastDatapoint field.
func (o *Goal) SetLastDatapoint(v Datapoint) {
	o.LastDatapoint = &v
}

// GetCallbackUrl returns the CallbackUrl field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Goal) GetCallbackUrl() string {
	if o == nil || o.CallbackUrl.Get() == nil {
		var ret string
		return ret
	}
	return *o.CallbackUrl.Get()
}

// GetCallbackUrlOk returns a tuple with the CallbackUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Goal) GetCallbackUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.CallbackUrl.Get(), o.CallbackUrl.IsSet()
}

// HasCallbackUrl returns a boolean if a field has been set.
func (o *Goal) HasCallbackUrl() bool {
	if o != nil && o.CallbackUrl.IsSet() {
		return true
	}

	return false
}

// SetCallbackUrl gets a reference to the given NullableString and assigns it to the CallbackUrl field.
func (o *Goal) SetCallbackUrl(v string) {
	o.CallbackUrl.Set(&v)
}
// SetCallbackUrlNil sets the value for CallbackUrl to be an explicit nil
func (o *Goal) SetCallbackUrlNil() {
	o.CallbackUrl.Set(nil)
}

// UnsetCallbackUrl ensures that no value is present for CallbackUrl, not even an explicit nil
func (o *Goal) UnsetCallbackUrl() {
	o.CallbackUrl.Unset()
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *Goal) GetTags() []string {
	if o == nil || o.Tags == nil {
		var ret []string
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Goal) GetTagsOk() ([]string, bool) {
	if o == nil || o.Tags == nil {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *Goal) HasTags() bool {
	if o != nil && o.Tags != nil {
		return true
	}

	return false
}

// SetTags gets a reference to the given []string and assigns it to the Tags field.
func (o *Goal) SetTags(v []string) {
	o.Tags = v
}

// GetRecentData returns the RecentData field value if set, zero value otherwise.
func (o *Goal) GetRecentData() []GoalRecentDataInner {
	if o == nil || o.RecentData == nil {
		var ret []GoalRecentDataInner
		return ret
	}
	return o.RecentData
}

// GetRecentDataOk returns a tuple with the RecentData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Goal) GetRecentDataOk() ([]GoalRecentDataInner, bool) {
	if o == nil || o.RecentData == nil {
		return nil, false
	}
	return o.RecentData, true
}

// HasRecentData returns a boolean if a field has been set.
func (o *Goal) HasRecentData() bool {
	if o != nil && o.RecentData != nil {
		return true
	}

	return false
}

// SetRecentData gets a reference to the given []GoalRecentDataInner and assigns it to the RecentData field.
func (o *Goal) SetRecentData(v []GoalRecentDataInner) {
	o.RecentData = v
}

// GetDueby returns the Dueby field value if set, zero value otherwise.
func (o *Goal) GetDueby() map[string]GoalDuebyValue {
	if o == nil || o.Dueby == nil {
		var ret map[string]GoalDuebyValue
		return ret
	}
	return *o.Dueby
}

// GetDuebyOk returns a tuple with the Dueby field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Goal) GetDuebyOk() (*map[string]GoalDuebyValue, bool) {
	if o == nil || o.Dueby == nil {
		return nil, false
	}
	return o.Dueby, true
}

// HasDueby returns a boolean if a field has been set.
func (o *Goal) HasDueby() bool {
	if o != nil && o.Dueby != nil {
		return true
	}

	return false
}

// SetDueby gets a reference to the given map[string]GoalDuebyValue and assigns it to the Dueby field.
func (o *Goal) SetDueby(v map[string]GoalDuebyValue) {
	o.Dueby = &v
}

// GetDatapoints returns the Datapoints field value if set, zero value otherwise.
func (o *Goal) GetDatapoints() []Datapoint {
	if o == nil || o.Datapoints == nil {
		var ret []Datapoint
		return ret
	}
	return o.Datapoints
}

// GetDatapointsOk returns a tuple with the Datapoints field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Goal) GetDatapointsOk() ([]Datapoint, bool) {
	if o == nil || o.Datapoints == nil {
		return nil, false
	}
	return o.Datapoints, true
}

// HasDatapoints returns a boolean if a field has been set.
func (o *Goal) HasDatapoints() bool {
	if o != nil && o.Datapoints != nil {
		return true
	}

	return false
}

// SetDatapoints gets a reference to the given []Datapoint and assigns it to the Datapoints field.
func (o *Goal) SetDatapoints(v []Datapoint) {
	o.Datapoints = v
}

func (o Goal) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Slug != nil {
		toSerialize["slug"] = o.Slug
	}
	if o.Title != nil {
		toSerialize["title"] = o.Title
	}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	if o.Goalval.IsSet() {
		toSerialize["goalval"] = o.Goalval.Get()
	}
	if o.Rate.IsSet() {
		toSerialize["rate"] = o.Rate.Get()
	}
	if o.Goaldate.IsSet() {
		toSerialize["goaldate"] = o.Goaldate.Get()
	}
	if o.SvgUrl != nil {
		toSerialize["svg_url"] = o.SvgUrl
	}
	if o.GraphUrl != nil {
		toSerialize["graph_url"] = o.GraphUrl
	}
	if o.ThumbUrl != nil {
		toSerialize["thumb_url"] = o.ThumbUrl
	}
	if o.GoalType != nil {
		toSerialize["goal_type"] = o.GoalType
	}
	if o.Autodata.IsSet() {
		toSerialize["autodata"] = o.Autodata.Get()
	}
	if o.Healthkitmetric != nil {
		toSerialize["healthkitmetric"] = o.Healthkitmetric
	}
	if o.Losedate != nil {
		toSerialize["losedate"] = o.Losedate
	}
	if o.Deadline != nil {
		toSerialize["deadline"] = o.Deadline
	}
	if o.Leadtime != nil {
		toSerialize["leadtime"] = o.Leadtime
	}
	if o.Alertstart != nil {
		toSerialize["alertstart"] = o.Alertstart
	}
	if o.UseDefaults != nil {
		toSerialize["use_defaults"] = o.UseDefaults
	}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Ephem != nil {
		toSerialize["ephem"] = o.Ephem
	}
	if o.Queued != nil {
		toSerialize["queued"] = o.Queued
	}
	if o.Panic != nil {
		toSerialize["panic"] = o.Panic
	}
	if o.UpdatedAt != nil {
		toSerialize["updated_at"] = o.UpdatedAt
	}
	if o.Burner != nil {
		toSerialize["burner"] = o.Burner
	}
	if o.Yaw != nil {
		toSerialize["yaw"] = o.Yaw
	}
	if o.Lane != nil {
		toSerialize["lane"] = o.Lane
	}
	if o.Lanewidth != nil {
		toSerialize["lanewidth"] = o.Lanewidth
	}
	if o.Delta != nil {
		toSerialize["delta"] = o.Delta
	}
	if o.Runits != nil {
		toSerialize["runits"] = o.Runits
	}
	if o.Limsum != nil {
		toSerialize["limsum"] = o.Limsum
	}
	if o.Frozen != nil {
		toSerialize["frozen"] = o.Frozen
	}
	if o.Lost != nil {
		toSerialize["lost"] = o.Lost
	}
	if o.Won != nil {
		toSerialize["won"] = o.Won
	}
	if o.Contract != nil {
		toSerialize["contract"] = o.Contract
	}
	if o.DeltaText != nil {
		toSerialize["delta_text"] = o.DeltaText
	}
	if o.Safebump != nil {
		toSerialize["safebump"] = o.Safebump
	}
	if o.Safesum != nil {
		toSerialize["safesum"] = o.Safesum
	}
	if o.Limsumdate != nil {
		toSerialize["limsumdate"] = o.Limsumdate
	}
	if o.Limsumdays != nil {
		toSerialize["limsumdays"] = o.Limsumdays
	}
	if o.Baremin != nil {
		toSerialize["baremin"] = o.Baremin
	}
	if o.Baremintotal != nil {
		toSerialize["baremintotal"] = o.Baremintotal
	}
	if o.Roadstatuscolor != nil {
		toSerialize["roadstatuscolor"] = o.Roadstatuscolor
	}
	if o.Lasttouch != nil {
		toSerialize["lasttouch"] = o.Lasttouch
	}
	if o.Safebuf != nil {
		toSerialize["safebuf"] = o.Safebuf
	}
	if o.Coasting != nil {
		toSerialize["coasting"] = o.Coasting
	}
	if o.Integery != nil {
		toSerialize["integery"] = o.Integery
	}
	if o.Fineprint != nil {
		toSerialize["fineprint"] = o.Fineprint
	}
	if o.Todayta != nil {
		toSerialize["todayta"] = o.Todayta
	}
	if o.Hhmmformat != nil {
		toSerialize["hhmmformat"] = o.Hhmmformat
	}
	if o.Gunits != nil {
		toSerialize["gunits"] = o.Gunits
	}
	if o.WeekendsOff != nil {
		toSerialize["weekends_off"] = o.WeekendsOff
	}
	if o.Yaxis != nil {
		toSerialize["yaxis"] = o.Yaxis
	}
	if o.Maxflux.IsSet() {
		toSerialize["maxflux"] = o.Maxflux.Get()
	}
	if o.Tmin.IsSet() {
		toSerialize["tmin"] = o.Tmin.Get()
	}
	if o.Tmax.IsSet() {
		toSerialize["tmax"] = o.Tmax.Get()
	}
	if o.Initday != nil {
		toSerialize["initday"] = o.Initday
	}
	if o.Initval != nil {
		toSerialize["initval"] = o.Initval
	}
	if o.Curday != nil {
		toSerialize["curday"] = o.Curday
	}
	if o.Curval != nil {
		toSerialize["curval"] = o.Curval
	}
	if o.Lastday != nil {
		toSerialize["lastday"] = o.Lastday
	}
	if o.Dir != nil {
		toSerialize["dir"] = o.Dir
	}
	if o.Kyoom != nil {
		toSerialize["kyoom"] = o.Kyoom
	}
	if o.Odom != nil {
		toSerialize["odom"] = o.Odom
	}
	if o.Noisy != nil {
		toSerialize["noisy"] = o.Noisy
	}
	if o.Aggday != nil {
		toSerialize["aggday"] = o.Aggday
	}
	if o.Plotall != nil {
		toSerialize["plotall"] = o.Plotall
	}
	if o.Steppy != nil {
		toSerialize["steppy"] = o.Steppy
	}
	if o.Rosy != nil {
		toSerialize["rosy"] = o.Rosy
	}
	if o.Movingav != nil {
		toSerialize["movingav"] = o.Movingav
	}
	if o.Aura != nil {
		toSerialize["aura"] = o.Aura
	}
	if o.Numpts != nil {
		toSerialize["numpts"] = o.Numpts
	}
	if o.Road != nil {
		toSerialize["road"] = o.Road
	}
	if o.Roadall != nil {
		toSerialize["roadall"] = o.Roadall
	}
	if o.Fullroad != nil {
		toSerialize["fullroad"] = o.Fullroad
	}
	if o.Secret != nil {
		toSerialize["secret"] = o.Secret
	}
	if o.Pledge != nil {
		toSerialize["pledge"] = o.Pledge
	}
	if o.Mathishard != nil {
		toSerialize["mathishard"] = o.Mathishard
	}
	if o.Headsum != nil {
		toSerialize["headsum"] = o.Headsum
	}
	if o.Datapublic != nil {
		toSerialize["datapublic"] = o.Datapublic
	}
	if o.Graphsum != nil {
		toSerialize["graphsum"] = o.Graphsum
	}
	if o.Rah != nil {
		toSerialize["rah"] = o.Rah
	}
	if o.LastDatapoint != nil {
		toSerialize["last_datapoint"] = o.LastDatapoint
	}
	if o.CallbackUrl.IsSet() {
		toSerialize["callback_url"] = o.CallbackUrl.Get()
	}
	if o.Tags != nil {
		toSerialize["tags"] = o.Tags
	}
	if o.RecentData != nil {
		toSerialize["recent_data"] = o.RecentData
	}
	if o.Dueby != nil {
		toSerialize["dueby"] = o.Dueby
	}
	if o.Datapoints != nil {
		toSerialize["datapoints"] = o.Datapoints
	}
	return json.Marshal(toSerialize)
}

type NullableGoal struct {
	value *Goal
	isSet bool
}

func (v NullableGoal) Get() *Goal {
	return v.value
}

func (v *NullableGoal) Set(val *Goal) {
	v.value = val
	v.isSet = true
}

func (v NullableGoal) IsSet() bool {
	return v.isSet
}

func (v *NullableGoal) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGoal(val *Goal) *NullableGoal {
	return &NullableGoal{value: val, isSet: true}
}

func (v NullableGoal) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGoal) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


